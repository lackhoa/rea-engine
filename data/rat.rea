#load "boolean.rea"
#load "z.rea"

;; Rat+ :: union { /: (n,d: Natp) -> Rat+ }
;; Rat :: union { 0, +: (v: Rat+) -> Rat, -: (v: Rat+) -> Rat }
Rat :: union { /(n: Z, d: Natp) }

+ :: fn (a,b: Rat) -> Rat
{;; todo: type coercion
 n : Z := a.n * +(b.d) + b.n * +(a.d);
 d : Natp := a.d * b.d;
 n / d
 }

addAssociative :: (a,b,c: Rat) -> (a+b)+c = a+b+c
{rewrite(mulAssociative(a.d, b.d, c.d))}
