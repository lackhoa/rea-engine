typedef Bool
{
 | F
 | T
 }

define &(a: Bool, b: Bool) : Bool
{
 switch a
 {
  | F { F }
  | T { b }
  }
 }

define |(a: Bool, b: Bool) : Bool
{
 switch a
 {
  | T { T }
  | F { b }
  }
 }


printRaw &(T, |(F,T,),);
printRaw (switch T {| T { & } | F { | } })(T, F);
printRaw F & T | T;
printRaw F & T | T & F | T;

printRaw identical(Bool, T, F);
printRaw F & T | T = F & (T | T);

theorem test() : (F & T | T = T)
{
 return truth;
 }
print test;


check truth : F & T | T = T;
check truth : (switch T {| T { & } | F { | } })(T, F) = F;
