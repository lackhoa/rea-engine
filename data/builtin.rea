#load "builtin-equal.rea"

/\ :: union(^A,^B: Type)
{
 pair(a: A, b: B)
 }

\/ :: union(^A,^B: Type)
{
 left(a: A),
 right(b: B)
 }

eqChain :: fn($A: Type, $a,$b,$c: A, a=b, b=c) -> a=c
#builtin {=> b = c {seek(a=b)} seek}
falseImpliesAll :: fn(f: False, G: Type) -> G
#builtin {fork f {}}

!= :: fn ($A: Type, a,b: A) -> Type
#expand
{ return (a=b) -> False }

identity :: fn(A: Type) -> (a: A) -> A
{ return fn {return a} }

alreadyGotFalse :: (A: Type, e: A=False) -> ((A) -> False)
#hint
{ return fn (a:A) -> False { rewrite <- e; return a } }

Maybe :: union(^A: Type)
{none,
 some(v: A)}

binaryOp :: fn(T: Type) -> Type
#expand
{return (:T, :T) -> T}

associative :: fn($T: Type, +: binaryOp(T)) -> Type
#expand
{return (a,b,c: T) -> (a + b) + c = a + b + c}

commutative :: fn($T: Type, +: binaryOp(T)) -> Type
#expand
{return (a,b: T) -> a + b = b + a}

Exists :: union(^$T: Type, ^prop: (x: T) -> Type)
#builtin
{
  evidence(e: T, p: prop(e))
  }

Reachable :: union(^$T: Type, ^R: (a:T, b:T) -> Type, ^x: T)
{
  reachable(p: (y: T, lt: y R x) -> Reachable(R, y))
  }

WellFounded :: fn($T: Type, R: (a:T, b:T) -> Type) -> Type
#builtin
{
  return (a: T) -> Reachable(R, a)
  }

#load "plist.rea"
