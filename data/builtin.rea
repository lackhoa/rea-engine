#load "builtin-equal.rea"

/\ :: union($$A,$$B: Type)
{
 conjunction(a: A, b: B)
 }

eqChain :: fn($A: Type, $a,$b,$c: A, a=b, b=c) -> a=c
#builtin {=> b = c {seek(a=b)} seek}
falseImpliesAll :: fn(f: False, G: Type) -> G
#builtin {fork f {}}

!= :: fn ($A: Type, a,b: A) -> Type
#expand
{ return (a=b) -> False }

identity :: fn(A: Type) -> (a: A) -> A
{ return fn {return a} }

alreadyGotFalse :: (A: Type, e: A=False) -> ((A) -> False)
#hint
{ return fn (a:A) -> False { rewrite <- with e; return a } }

Maybe :: union($$A: Type)
{none,
 some(v: A)}

binaryOp :: fn(T: Type) -> Type
#expand
{return (a,b: T) -> T}

associative :: fn($T: Type, op: binaryOp(T)) -> Type
#expand
{return (a,b,c: T) -> (a op b) op c = a op b op c}

commutative :: fn($T: Type, op: binaryOp(T)) -> Type
#expand
{return (a,b: T) -> a op b = b op a}

#load "plist.rea"
;; #load "list.rea"
