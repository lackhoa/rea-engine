Bool :: union {false, true}

typecheck :: fn (id: (A: Set, a: A) -> a=a, b: Bool) -> b=b
{id(Bool, b)}
print typecheck;

#should_fail
typecheck1 :: fn (id: (A: Set, a: A) -> a=a, b: Bool) -> b=b
{b}
typecheck2 :: fn (id: (A: Set, a: A) -> a=a, a,b: Bool) -> b=b
{id(Bool, a)}
#should_fail off

& :: fn (a, b: Bool) -> Bool
{fork a
 {false: false,
  true:  b}}

| :: fn (a, b: Bool) -> Bool
{fork a
 {true:  true,
  false: b}}

andAssociative :: fn (a, b, c: Bool) -> (a & b) & c = a & b & c
{fork a
 {false: ,
  true : }}

andFalse :: (a: Bool) -> a & false = false {fork a {false:, true:}}
