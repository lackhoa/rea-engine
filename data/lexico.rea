;; NOTE Stuff regarding "<" is broken in this one

define <(p1,p2: Natp /\ Natp) :=
(p1.a < p2.a) \/ (p1.a = p2.a /\ p1.b < p2.b);

lexicoLtLemma ::
(a,b: Natp, x: Natp /\ Natp, lt: x < pair(a, ++(b)))
-> x = pair(a,b) \/ x < pair(a,b)
{ unfold;
  fork lt
  { auto prove x < pair(a,b) {norm unfold}
    ,
    auto
    lemma := prove x.b = b \/ x.b < b {use ltLemma};
    fork lemma
    { auto prove (x = pair(a,b)) {rewrite lemma.a; rewrite lt.b.a}
      ,
      auto prove x < pair(a, b) {norm unfold}}}}

lexicoReachableLocked ::
(a,b: Natp, h: Reachable(<, pair(a, (:Natp)1)))
->
Reachable(<, pair(a,b))
{ fork b
  { 1,
    ++
    use reachable
    { p
      fn y,lt;
      norm unfold as lt1 lt;
      fork lt1
      { auto
        ;; y.a < a -> y is less than (a,1)
        prove y < pair(a,1) {norm unfold};
        use (h.p);
        ,
        auto
        ;; y.a = a; y.b <= b.p
        ih : Reachable(<, pair(a, b.p)) := use lexicoReachableLocked with a=a, b=b.p;

        ;; either "y = a,b.p" in which case the induction hypothesis applies
        ;; or "y < a,b.p", in which case the induction hypothesis also applies

        lemma := use lexicoLtLemma with lt=lt;
        fork lemma {auto rewrite lemma.a, auto use (ih.p)}}}}}

lexicoWellFounded1 :: (b: Natp) -> Reachable(<, pair((:Natp)1,b))
{ super_base_case := prove Reachable(<, pair((:Natp)1, (:Natp)1))
  { use reachable
    { p fn y,lt
      { norm unfold lt; fork lt {auto , auto } }}};
  fork b
  { 1 return super_base_case,
    ++ use lexicoReachableLocked;}}

lexicoWellFounded_ :: (a: Natp, b: Natp) -> Reachable(<, pair(a,b))
{
  fork a
  {
    1 use lexicoWellFounded1,
    ++
    if_b_is_1 := prove Reachable(<, pair(a, (:Natp)1))
    {;; Anything that "rolls under" to a.p is gonna be resolved by induction.
      use reachable
      { p fn y, lt
        { norm unfold lt;
          fork lt
          {
            auto
            prove y < pair(a.p, ++(y.b))
            { norm unfold;
              lemma := use ltLemma with a=y.a, b=a.p;
              fork lemma {auto , auto}}
            ih := use lexicoWellFounded_ with a=a.p, b = ++(y.b);
            use (ih.p),
            auto}}}};
    fork b
    { 1 return if_b_is_1,
      ++ use lexicoReachableLocked}}}

lexicoWellFounded : WellFounded(Natp/\Natp, <) :=
prove
{norm; return fn (x: Natp/\Natp) -> Reachable(<, x) { fork x {pair use lexicoWellFounded_;} }};

