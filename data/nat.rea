#load "boolean.rea"

typedef Nat : Set
{
 0,
 s(Nat),
 }

+ :: (n, m: Nat) -> Nat
{
 fork n
 {
  0     : m,
  s(n1) : s(n1 + m),
  }
 }
print s;
print +;

1 := s(0);
2 := s(1);
3 := s(2);
4 := s(3);
5 := s(4);
6 := s(5);
check truth: 1 + 2 = 3;

pred :: (n : Nat) -> Nat
{
 fork n
 {
  0 : 0,
  s(n) : n
  }
 }
print pred;

even :: (n : Nat) -> Bool
{
 fork n
 {
  0     : true,
  s(n69) : fork n69 {0 : false, s(n70) : even(n70)},
  }
 }

check truth: even(4) = true;
check truth: even(3) = false;

* :: (n, m: Nat) -> Nat
{
 fork n
 {
  0 : 0,
  s(n1) : m + n1 * m,
  }
 }

check truth: 2*3 = 6;

- :: (n, m : Nat) -> Nat
{
 fork n
 {
  0 : 0,
  s(n1) : fork(m) {0 : n,
                   s(m1) : n1 - m1,
                   },
  }
 }

check truth: 3 - 2 = 1;
check truth: 4 - 1 = 3;
