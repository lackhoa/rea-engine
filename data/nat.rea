#load "boolean.rea"

Nat :: union
{0,
 ++: (p: Nat) -> Nat}

+ :: fn (n, m: Nat) -> Nat
{fork n
 {0  : m,
  ++ : ++(n.p + m)}}

1 := ++(0);
2 := ++(1);
3 := ++(2);
4 := ++(3);
5 := ++(4);
6 := ++(5);
check_truth 1 + 2 = 3;

pred :: fn (n : Nat) -> Nat
{fork n
 {0  : 0,
  ++ : n.p}}
check_truth pred(4) = 3;

even :: fn (n : Nat) -> Bool
{fork n
 {0  : true,
  ++ : fork n.p {0 : false, ++ : even(n.p.p)}}}

check_truth even(4) = true;
check_truth even(3) = false;

* :: fn (n, m: Nat) -> Nat
{
 fork n
 {
  0     : 0,
  ++(n1) : m + n.p * m,
  }
 }

check_truth  2*3 = 6;

- :: fn (n, m : Nat) -> Nat
{
 fork n
 {
  0     : 0,
  ++(n1) : fork(m) {0 : n, ++(m1) : n.p - m.p}
  }
 }

check_truth 3 - 2 = 1;
check_truth 4 - 1 = 3;

addIdRight :: fn (n: Nat) -> n + 0 = n
{
 fork n
 {
  0 : computation,
  ++:
  norm;
  rewrite addIdRight(n.p);
  refl(++(n.p));
  }
 }
;; print(addIdRight(2));

addSRight :: fn (n, m: Nat) -> n + ++(m) = ++(n+m)
{
 fork n
 {
  0 : norm; truth,
  ++: rewrite addSRight(n.p, m); truth,
  }
 }

addCommutative :: fn (n, m: Nat) -> (n + m = m + n)
{
 fork n
 {
  0 : rewrite addIdRight(m); truth,
  ++: rewrite addCommutative(n.p, m); rewrite addSRight(m, n.p); truth,
  }
 }

addAssociative :: fn (a, b, c: Nat) -> (a+b)+c = a+b+c
{
 fork a
 {
  0 : truth,
  ++: rewrite addAssociative(a.p, b, c); truth,
  }
 }

mulDistributive :: fn (a,b,c: Nat) -> a*c+b*c = (a+b)*c
{fork a
 {0: truth,

  ++:
  rewrite mulDistributive(a.p, b, c);
  rewrite addAssociative(c, (a.p * c), (b * c));
  truth}}

mulAssociative :: fn (a,b,c: Nat) -> (a*b)*c = a*b*c
{fork a
 {0: truth,
  ++:
  rewrite left mulDistributive(b, (a.p * b), c);
  rewrite mulAssociative(a.p, b, c);
  truth,
  }}

!= :: fn (_A: Set, a, b: _A) -> Type
{
 (E: a = b) -> False
 }

multiplyPos :: fn (a,b: Nat, a_positive: a != 0, b_positive: b != 0) -> a*b != 0
{
 out :: fn (e: a*b = 0) -> False
 {fork a
  {0: a_positive(truth),

   ++:
   fork b
   {0: b_positive(truth),
    ++: e
    }}}
 out
 }
