#load "boolean.rea"
#load "nat.rea"

#should_fail
check truth: true = false;
#should_fail off

!= :: (_A: Set, a, b: _A) -> Type
{
 (E: a = b) -> False
 }

Rat :: union
{
 / : (n,d: Nat, _dnot0: d != 0) -> Rat
 }

BigStruct :: union
{
 makeBigStruct : (r: Rat) -> BigStruct
 }

testBigStruct :: (big : BigStruct) -> (big.r.d != 0)
{
 big.r._dnot0
 }

testRatArrow :: (r: Rat) -> r.d != 0 { r._dnot0 }

testRatArrow2 :: () -> (a: Rat) -> (a.d = a.d)
{
 out :: (b: Rat) -> (b.d = b.d) {truth}
 out
 }

;; todo operator overload
rat_plus :: (a, b: Rat) -> Rat
{
 /((a.n * b.d + b.n * a.d), (a.d * b.d), a._dnot0)
 }
