#load "boolean.rea"
#load "nat.rea"

;; print_raw (x: False) -> (x = x);
;; print_raw false & true | true & false | true;

;; print_raw &(true, |(false,true,),);
;; print_raw false & true | true & false | true;

;; print_raw =(_, true, false);

typecheck :: fn (id: (A: Set, a: A) -> a=a, b: Bool) -> b=b
{return id(Bool, b)}

#should_fail
typecheck1 :: fn (id: (A: Set, a: A) -> a=a, b: Bool) -> b=b
{return b}
typecheck2 :: fn (id: (A: Set, a: A) -> a=a, a,b: Bool) -> b=b
{return id(Bool, a)}
#should_fail off

check_truth false & true = false;
check_truth false & true | true = true;

testAbstraction :: fn (a, b: Bool) -> Bool
{fork a
 {true : return b,
  false: fork b {false: return a, true: return false}}}

check andAssociative(true, false, true) : ((true & false) & true = true & false & true);

#should_fail
dependentTypeFailTest :: fn (T: Type, A: T, a: A) -> a=a
{}
#should_fail off

dependentTypeTest :: fn (A: Set, a: A) -> a=a
{}
check dependentTypeTest(Bool, true): true=true;

testComplexFork :: fn (a, b: Nat) -> Nat
{apb := a+b;
 fork apb
 {0 : return 0,
  ++: return apb.p}}
check_truth testComplexFork(0, 0) = 0;
check_truth testComplexFork(1, 1) = 1;

testLocalVariable :: fn (x: Nat) -> Nat
{a := 3;
 b := 2;
 return a + x + b}
check_truth testLocalVariable(1) = 6;

#should_fail
reproLet :: fn (a: Nat) -> Nat {b : Bool := true; return b}
#should_fail off

#should_fail 
testCurryingWeird :: fn (a: Nat) -> (b, c: Nat) -> (a+b)+c = a+(b+c)
{fork a
 {++:
  ;; NOTE: the "a.p" is the weird part, which depends on rewrite rule to work,
  ;; and we need to support it.
  out : (b',c': Nat) -> (a.p+b')+c' = a.p+b'+c' := _ => { return addAssociative(a.p, b', c') }
  return out,

  0:
  out : (b, c: Nat) -> (a+b)+c = a+b+c := _ => { return addAssociative(a, b, c) }
  return out}}
#should_fail off

testCurrying2 :: fn (a, b, c: Nat) -> (a+b)+c = a+(b+c)
{fun : (b',c': Nat) -> (a+b')+c' = a+(b'+c') := _ => { return addAssociative(a, b', c') }
 return fun(b,c)}

#should_fail
testCurrying2Fail :: fn (a, b, c: Nat) -> (a+b)+c = a+(b+c)
{fun : (c',b': Nat) -> (a+b')+c' = a+(b'+c') := _ => { return addAssociative(a, b', c') }
 return fun(b,c)}
#should_fail off

testLocalFunction :: fn (a: Nat) -> Nat
{b := 3;
 f : (n: Nat) -> Nat := _ => { return n*b }
 fork a {0: return 4, ++: return f(a)}}
check_truth testLocalFunction(2) = 6;

#should_fail
check_truth ((a,b: Nat) -> a+b = b+a) = ((A,B: Nat) -> A+B = B+A);
check_truth ((a,b: Nat) -> a+b = b+a) = ((A,B: Nat) -> A+B = B+B);
#should_fail off

testArrowEvaluation :: fn (A: Type) -> (a: A) -> A {return _ => {return a}}

testFunctionPointer :: fn (a,b: Bool) -> Bool
{foo : (x: Bool) -> Bool := _ => {return x & b}
 d := false;
 return foo(a);}
check_truth testFunctionPointer(true,true) = true;

testFunctionPointerHelper :: fn () -> (a,b,c: Bool) -> Bool {return _ => {return c}}
testFunctionPointerMore :: fn (a: Bool) -> Bool
{foo := testFunctionPointerHelper();
 return foo(true,false,a);}
check_truth testFunctionPointerMore(false) = false;

testConstantInFunctionHelper :: fn () -> Nat {a := 4; return a}
testConstantInFunction :: fn () -> Nat {b := testConstantInFunctionHelper(); return b}
check_truth testConstantInFunction() = 4;

;; showing off now that we have arrow type normalization
mulPosv2 :: (a,b: Nat, a_positive: a != 0, b_positive: b != 0) -> a*b != 0
{norm a_positive; norm b_positive;
 fork a
 {0 : return _ => {return a_positive(_)},
  ++: ;; goal: (b + a.p * b = 0) -> False
  return _ => {fork b {0: return b_positive(_),
                       ++: norm(seek(b + a.p * b = 0)); seek}}
  }}

oneIsNotZero : 1 != 0 := seq {norm; return _ => {seek}};
test_eval mulPos(1,1,oneIsNotZero,oneIsNotZero);
;; print mulPos;

somethingWicked :: fn (a,b,c: Nat) -> Type {return (p: a=b) -> (q: b=c) -> a=c}
somethingWickedUsage :: () -> (x,y,z: Nat) -> (somethingWicked(x,y,z))
{norm;
 return _ => {return _ => {return _ => {rewrite p; rewrite q}}}}

StructWithFunction :: union {makeStructWithFunction(a: Nat, b: (E: a=0) -> False)}
oneEqualZeroImpliesFalse : ((E: 1=0) -> False) := seq{norm; return _ => {return E}};
testFunctionInComposite :: fn (x: StructWithFunction, E: x.a = 0) -> False
{return x.b(E)}
testFunctionInCompositeUsage :: (Wrong: 1=0) -> False
{
 obj := testFunctionInComposite(makeStructWithFunction(1, oneEqualZeroImpliesFalse), Wrong);
 return obj
 }
;; print testFunctionInCompositeUsage;

foo :: (a: Bool) -> union {f(p: a=false), t(p: a=true)}
{
 fork a
 {
  false return ctor[0](_),
  true  return ctor[1](_),
  }
 }

True :: union {truth}

arrowTypeUnification :: (x: True) -> (a: True) -> a=x {return _ => {fork a {truth: fork x {truth: }}}}
test_eval arrowTypeUnification(truth);
arrowTypeUnificationTest :: (y: True) -> (b: True) -> b=y {return arrowTypeUnification(y)}

#should_fail
check truth: true = false;
#should_fail off

;; todo this can be just be a struct
RatTest :: union {/(n,d: Nat, _dnot0: d != 0)}
+ :: fn (a, b: RatTest) -> RatTest
{return /(a.n * b.d + b.n * a.d,
          a.d * b.d,
          mulPos(a.d, b.d, a._dnot0, b._dnot0))}

BigStruct :: union {bigStruct(r: RatTest)}
testBigStruct :: (big : BigStruct) -> (big.r.d != 0) {return big.r._dnot0}
testRatArrow :: fn (r: RatTest) -> r.d != 0 { return r._dnot0 }

SandwichEnd :: union {sandwichEndBool(b: Bool),
                      sandwichEndNat(n: Nat)}
SandwichMiddle :: union {makeSandwichMiddle(e: SandwichEnd)}  ;; a struct
Sandwich :: union
{
 sandwichBool(b: Bool),
 sandwichMiddle(m1: SandwichMiddle, m2: SandwichMiddle)
 }
useSandwich :: fn (sandwich: Sandwich) -> Nat
{
 fork sandwich
 {
  sandwichBool:   return 0,
  sandwichMiddle: fork sandwich.m2.e {sandwichEndBool: return 0,
                                      sandwichEndNat:  return sandwich.m2.e.n}
  }
 }
check_truth useSandwich(sandwichMiddle(makeSandwichMiddle(sandwichEndBool(true)),
                                       makeSandwichMiddle(sandwichEndNat(2)))) = 2;

#should_fail
check 1+2: RatTest;
#should_fail off

testFillingHole :: (xdebug: Nat, x_positive: xdebug!=0, P: xdebug=0) -> False
{norm x_positive;
 fork (xdebug)
 {0 : norm x_positive; return x_positive(_),
  ++: norm P; return P}
 }

check id(False) : ((f: False) -> False);

unionRebasing :: (a: Nat) -> union {eq(a = a)}
{
 prove(a=a) {}
 return ctor[0](seek(a=a))
 }

testAnonymousParameter :: fn (A: Set, A) -> A
{ seek }
;; print testAnonymousParameter;

testFillHole :: (a: Nat) -> a + 0 = a {}

testStructAsHint :: (u: union {c(v: true=false)}) -> true=false
{
 ;; return u.v
 }

twiceApplier :: fn($A: Set, op: (x,y: A) -> A, a: A) -> A
{return op(a,a)}

testPolymorphSolver :: fn(n: Nat) -> Nat
{return twiceApplier(+, n)}

check_truth testPolymorphSolver(3) = 6;

;; The Manhattan algebra test!
;; The Manhattan algebra test!
;; The Manhattan algebra test!

algebraTest :: (a,b,c,d,e,f: Nat) -> ((a+b)+c)+(d+e)+f = a+b+c+d+e+f
{return algebraic_norm(((a+b)+c)+(d+e)+f)}

List :: union(ListType: Set)
{single(head: ListType),
 cons  (head: ListType, tail: List(ListType))}

#debug
print(cons);

;; #debug
;; testList :: fn(l: List(Nat)) -> List(Nat)
;; {fork l
;;  {single
;;   ;; return single(Nat, l.head),  ;; todo: this also breaks
;;   return single(l.head),
;;   cons   return l.tail}}

;; fold :: fn($A: Set, op: (a,b: A) -> A, list: List(A)) -> A
;; #no_print_as_binop
;; {
;;  fork list
;;  {
;;   single
;;   return list.head,

;;   cons
;;   return list.head
;;   ;; return list.head op fold(op, list.tail)
;;   }
;;  }

;; check_truth fold(overload(+, Nat), 1 cons single(2));

;; + :: fn($A: Set, l,m: List(A)) -> List(A)
;; {norm unfold(List) l;
;;  fork l
;;  {single return (l.head cons m),
;;   cons   return (l.head cons (l.tail + m))}}

;; Permutation :: fn(abc, cab: List) -> Set
;; #no_apply
;; {
;;  return union
;;  {
;;   samePermutation(same: abc=cab),
;;   permutation(a: Nat, bc, c,b: List,
;;               abc_destruct: abc=(a cons bc),
;;               cab_destruct: cab=(c + (a cons b)),
;;               recurse: Permutation(bc, c+b))
;;   }
;;  }

;; foldConcat :: (op: (a,b: Nat) -> Nat,
;;                associative: (a,b,c: Nat) -> (a op b) op c = a op b op c,
;;                l,m: List) -> fold(op, l + m) = fold(op, l) op fold(op, m)
;; #hint
;; {fork l
;;  {single,
;;   cons
;;   rewrite foldConcat(op, associative, l.tail, m);
;;   ;; (l.head op fold(op, l.tail) op fold(op, m)) = ((l.head op fold(op, l.tail)) op fold(op, m))
;;   rewrite associative(l.head, fold(op, l.tail), fold(op, m));
;;   }}

;; foldPermutation :: (op: (a,b: Nat) -> Nat,
;;                     op_associative: (a,b,c: Nat) -> (a op b) op c = a op b op c,
;;                     op_commutative: (a,b: Nat) -> a op b = b op a,
;;                     l,m: List,
;;                     p: Permutation(l, m)) -> fold(op, l) = fold(op, m)
;; {
;;  norm unfold(Permutation) p;
;;  fork p
;;  {
;;   samePermutation
;;   rewrite p.same,

;;   permutation
;;   rewrite p.abc_destruct;
;;   rewrite p.cab_destruct;
;;   norm;
;;   ;; p.a op fold(op, p.bc) = fold(op, p.c + (p.a cons p.b))
;;   => p.a op fold(op, p.bc) = fold(op, p.c) op fold(op, p.a cons p.b)
;;   => p.a op fold(op, p.bc) = fold(op, p.c) op p.a op fold(op, p.b)
;;   => p.a op fold(op, p.bc) = (p.a op fold(op, p.b)) op fold(op, p.c) {op_commutative}
;;   => p.a op fold(op, p.bc) = p.a op fold(op, p.b) op fold(op, p.c) {op_associative}
;;   => p.a op fold(op, p.bc) = p.a op fold(op, p.c) op fold(op, p.b) {op_commutative}
;;   => p.a op fold(op, p.bc) = p.a op fold(op, p.c + p.b);
;;   prove fold(op, p.bc) = fold(op, p.c + p.b) {return foldPermutation(...)} as e
;;   rewrite e;
;;   }
;;  }
