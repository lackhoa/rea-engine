typedef Bool
{
 | F
 | T
 }

define &(a: Bool, b: Bool) : Bool
{
 switch a
 {
  | F { F }
  | T { b }
  }
 }

define |(a: Bool, b: Bool) : Bool
{
 switch a
 {
  | T { T }
  | F { b }
  }
 }

theorem easyClap(a: Bool) : Bool
{
 return a;
 }
print(easyClap);
print(easyClap(T));
print(easyClap(F));

theorem stillEasy(a: Bool) : (F & a = F)
{
 return truth;
 }

theorem notSoEasy(a: Bool) : (a & F = F)
{
 switch a;
 - return truth;
 - return truth;
 }

print notSoEasy;

;; todo
;; printRaw F = T = F;
