#load "boolean.rea"
#load "nat.rea"

;; print_raw (x: False) -> (x = x);
;; print_raw false & true | true & false | true;

;; print_raw &(true, |(false,true,),);
;; print_raw false & true | true & false | true;

;; print_raw =(_, true, false);

typecheck :: fn (id: (A: Type, a: A) -> a=a, b: Bool) -> b=b
{return id(Bool, b)}

typecheckAlpha :: (a,b,c: Bool, a=false) -> a & b = a & c
{=> false & b = a & c
 => false & b = false & c}

#should_fail
typecheck1 :: fn (id: (A: Type, a: A) -> a=a, b: Bool) -> b=b
{return b}
typecheck2 :: fn (id: (A: Type, a: A) -> a=a, a,b: Bool) -> b=b
{return id(Bool, a)}
typecheckBeta :: (a,b,c: Bool, a=false) -> a & b = a & c
{}
#should_fail off

check_truth false & true = false;
check_truth false & true | true = true;

testAbstraction :: fn (a, b: Bool) -> Bool
{fork a
 {true : return b,
  false: fork b {false: return a, true: return false}}}

check andAssociative(true, false, true) : ((true & false) & true = true & false & true);

#should_fail
dependentTypeFailTest :: fn (T: Type, A: T, a: A) -> a=a
{}
#should_fail off

dependentTypeTest :: fn (A: Type, a: A) -> a=a
{}
check dependentTypeTest(Bool, true): true=true;

testComplexFork :: fn (a, b: Nat) -> Nat
{apb := a+b;
 fork apb
 {0 : return 0,
  ++: return apb.p}}
check_truth testComplexFork(0, 0) = 0;
check_truth testComplexFork(1, 1) = 1;

testLocalVariable :: fn (x: Nat) -> Nat
{a := 3;
 b := 2;
 return a + x + b}
check_truth testLocalVariable(1) = 6;

#should_fail
reproLet :: fn (a: Nat) -> Nat {b : Bool := true; return b}
#should_fail off

#should_fail 
testCurryingWeird :: fn (a: Nat) -> (b, c: Nat) -> (a+b)+c = a+(b+c)
{fork a
 {++:
  ;; NOTE: the "a.p" is the weird part, which depends on rewrite rule to work,
  ;; and we need to support it.
  out : (b',c': Nat) -> (a.p+b')+c' = a.p+b'+c' := fn { return addAssociative(a.p, b', c') }
  return out,

  0:
  out : (b, c: Nat) -> (a+b)+c = a+b+c := fn { return addAssociative(a, b, c) }
  return out}}
#should_fail off

testCurrying2 :: fn (a, b, c: Nat) -> (a+b)+c = a+(b+c)
{fun : (b',c': Nat) -> (a+b')+c' = a+(b'+c') := fn { return addAssociative(a, b', c') };
 return fun(b,c)}

#should_fail
testCurrying2Fail :: fn (a, b, c: Nat) -> (a+b)+c = a+(b+c)
{fun : (c',b': Nat) -> (a+b')+c' = a+(b'+c') := fn { return addAssociative(a, b', c') }
 return fun(b,c)}
#should_fail off

testLocalFunction :: fn (a: Nat) -> Nat
{b := 3;
 f : (n: Nat) -> Nat := fn { return n*b };
 fork a {0: return 4, ++: return f(a)}}
check_truth testLocalFunction(2) = 6;

testArrowEvaluation :: fn (A: Type) -> (a: A) -> A {return fn {return a}}

testFunctionPointer :: fn (a,b: Bool) -> Bool
{foo : (x: Bool) -> Bool := fn {return x & b};
 d := false;
 return foo(a);}
check_truth testFunctionPointer(true,true) = true;

testFunctionPointerHelper :: fn () -> (a,b,c: Bool) -> Bool {return fn {return c}}
testFunctionPointerMore :: fn (a: Bool) -> Bool
{foo := testFunctionPointerHelper();
 return foo(true,false,a);}
check_truth testFunctionPointerMore(false) = false;

testConstantInFunctionHelper :: fn () -> Nat {a := 4; return a}
testConstantInFunction :: fn () -> Nat {b := testConstantInFunctionHelper(); return b}
check_truth testConstantInFunction() = 4;

;; showing off now that we have arrow type normalization
mulPosv2 :: (a,b: Nat, a_positive: a != 0, b_positive: b != 0) -> a*b != 0
{norm a_positive; norm b_positive;
 fork a
 {0 : return fn {return a_positive(_)},
  ++: ;; goal: (b + a.p * b = 0) -> False
  return fn {fork b {0: return b_positive(_),
                       ++: norm(seek(b + a.p * b = 0)); seek}}}}

testExecutionModel :: (a,b: Nat) -> (x: Nat) -> Nat
{
 return(fn(x: Nat) -> Nat {fy := fn(y: Nat) -> Nat {return a+b+x+y;};
                           return fy(a)})
 }
check_truth testExecutionModel(1,2)(1) = 5;

oneIsNotZero : 1 != 0 := prove {norm; return fn {seek}};
test_eval mulPos(1,1,oneIsNotZero,oneIsNotZero);
;; print mulPos;

somethingWicked :: fn (a,b,c: Nat) -> Type {return (p: a=b) -> (q: b=c) -> a=c}
somethingWickedUsage :: () -> (x,y,z: Nat) -> (somethingWicked(x,y,z))
{norm;
 return fn {return fn {return fn {rewrite p; rewrite q}}}}

StructWithFunction :: union {makeStructWithFunction(a: Nat, b: (E: a=0) -> False)}
oneEqualZeroImpliesFalse : ((E: 1=0) -> False) := prove {norm; return fn {return E}};
testFunctionInComposite :: fn (x: StructWithFunction, E: x.a = 0) -> False
{return x.b(E)}
testFunctionInCompositeUsage :: (Wrong: 1=0) -> False
{
 obj := testFunctionInComposite(makeStructWithFunction(1, oneEqualZeroImpliesFalse), Wrong);
 return obj
 }
;; print testFunctionInCompositeUsage;

True :: union {truth}

arrowTypeUnification :: (x: True) -> (a: True) -> a=x {return fn {fork a {truth: fork x {truth: }}}}
test_eval arrowTypeUnification(truth);
arrowTypeUnificationTest :: (y: True) -> (b: True) -> b=y {return arrowTypeUnification(y)}

#should_fail
check truth: true = false;
#should_fail off

RatTest :: union {/(n,d: Nat, _dnot0: d != 0)}
+ :: fn (a, b: RatTest) -> RatTest
{return /(a.n * b.d + b.n * a.d,
          a.d * b.d,
          mulPos(a.d, b.d, a._dnot0, b._dnot0))}

BigStruct :: union {bigStruct(r: RatTest)}
testBigStruct :: (big : BigStruct) -> (big.r.d != 0) {return big.r._dnot0}
testRatArrow :: fn (r: RatTest) -> r.d != 0 { return r._dnot0 }

SandwichEnd :: union {sandwichEndBool(b: Bool),
                      sandwichEndNat(n: Nat)}
SandwichMiddle :: union {makeSandwichMiddle(e: SandwichEnd)}  ;; a struct
Sandwich :: union
{
 sandwichBool(b: Bool),
 sandwichMiddle(m1: SandwichMiddle, m2: SandwichMiddle)
 }
useSandwich :: fn (sandwich: Sandwich) -> Nat
{
 fork sandwich
 {
  sandwichBool:   return 0,
  sandwichMiddle: fork sandwich.m2.e {sandwichEndBool: return 0,
                                      sandwichEndNat:  return sandwich.m2.e.n}
  }
 }
check_truth useSandwich(sandwichMiddle(makeSandwichMiddle(sandwichEndBool(true)),
                                       makeSandwichMiddle(sandwichEndNat(2)))) = 2;

#should_fail
check 1+2: RatTest;
#should_fail off

testFillingHole :: (xdebug: Nat, x_positive: xdebug!=0, P: xdebug=0) -> False
{norm x_positive;
 fork (xdebug)
 {0 : norm x_positive; return x_positive(_),
  ++: norm P; return P}
 }

testAnonymousParameter :: fn (A: Type, A) -> A
{ seek }
;; print testAnonymousParameter;

testFillHole :: (a: Nat) -> a + 0 = a {}

twiceApplier :: fn($A: Type, op: (x,y: A) -> A, a: A) -> A
{return op(a,a)}

testPolymorphSolver :: fn(n: Nat) -> Nat
{return twiceApplier(+, n)}

check_truth testPolymorphSolver(3) = 6;

;; ---------------------------
;; The Manhattan algebra test!
;; ---------------------------

;; check_truth fold(overload(+, Nat), 1 cons single(2)) = 3;
;; test_eval(single(1) + single(2));
;; check_truth ((1 cons single(2)) + single(3)) = (1 cons (2 cons single(3)));

;; test_eval test_sort([0]);
;; test_eval test_sort([2, 0]);
;; test_eval test_sort([0, 2]);

;; testSortList :: () -> (Permute([2, 0, 4, 3, 1], [0, 1, 2, 3, 4]))
;; {
;;  return test_sort([2, 0, 4, 3, 1]);
;;  }

;; algebraTest :: (a,b,c,d,e,f: Nat) -> ((a+b)+c)+(d+e)+f = fold(+, [a,b,c,d,e,f])
;; {
;;  return algebra_norm(((a+b)+c)+(d+e)+f)
;;  }

;; algebraTest2 :: (a,b,c,d,e,f: Nat) -> (((c+e)+a)+(b+f)+d) = fold(+, [a,b,c,d,e,f])
;; {
;;  return algebra_norm(((c+e)+a)+(b+f)+d)
;;  }

