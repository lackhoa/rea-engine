#load "boolean.rea"
#load "nat.rea"

#should_fail
check truth: true = false;
#should_fail off

mulDistributive :: (a,b,c: Nat) -> a*c+b*c = (a+b)*c
{
 fork a
 {0: truth,

  s(a'):
  rewrite mulDistributive(a.p, b, c);
  rewrite plusAssociative(c, (a.p * c), (b * c));
  truth}
 }

mulAssociative :: (a,b,c: Nat) -> (a*b)*c = a*(b*c)
{
 fork a
 {
  0: truth,
  s(a'):
  rewrite left mulDistributive(b, (a.p * b), c);
  rewrite mulAssociative(a.p, b, c),
  }
 }

!= :: (_A: Set, a, b: _A) -> Type
{
 (E: a = b) -> False
 }

Rat :: union
{
 / : (n,d: Nat, _dnot0: d != 0) -> Rat
 }

testRatArrow :: (r: Rat) -> r.d != 0 { r._dnot0 }

testRatArrow2 :: () -> (a: Rat) -> (a.d = a.d)
{
 out :: (b: Rat) -> (b.d = b.d) {truth}
 out
 }

;; todo operator overload
rat_plus :: (a, b: Rat) -> Rat
{
 fork a
 {
  /(an,ad,aproof): 
  fork b
  {
   /(bn,bd,bproof):
   /((a.n * b.d + b.n * a.d), (a.d * b.d), a._dnot0)
   }
  }
 }

