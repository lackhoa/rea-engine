#load "boolean.rea"
#load "nat.rea"

testComplexFork :: (a, b: Nat) -> Nat
{
 fork a+b
 {
  0:    0,
  s(n): n,
  }
 }
check truth: testComplexFork(0, 0) = 0;
check truth: testComplexFork(1, 1) = 1;

testLocalVariable :: (x: Nat) -> Nat
{
 a := 3;
 b := 2;
 a + x + b;
 }
check truth: testLocalVariable(1) = 6;

testCurrying :: (a: Nat) -> (b, c: Nat) -> a+(b+c) = (a+b)+c
{
 fork a
 {
  s(a'):
  out :: (b', c': Nat) -> a+b'+c' = (a+b')+c'
  { plusAssociative(a, b', c') }
  out,

  0:
  out :: (b, c: Nat) -> a + (b + c) = (a + b) + c
  { plusAssociative(a, b, c) }
  out,
  }
 }
print testCurrying(1);

testCurrying2 :: (a, b, c: Nat) -> a+(b+c) = (a+b)+c
{
 fun :: (b',c': Nat) -> a+(b'+c') = (a+b')+c'
 { plusAssociative(a, b', c') }

 fun(b,c)
 }
print testCurrying2(1,2,3);

testCurrying3 :: (a: Nat) -> Nat
{
 b := 3;
 f :: (n: Nat) -> Nat { n*b }
 f(a)
 }
check truth: testCurrying3(2) = 6;
