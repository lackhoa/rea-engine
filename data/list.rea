;; ----
;; List (Lists that can be empty)
;; ----

List :: union($$ListType: Type)
{nil,
 cons(head: ListType, tail: List(ListType))}

;; support parsing list syntax!
single :: fn($A: Type, a: A) -> List(A)
#expand
{return a cons nil()}

nonEmpty :: fn ($A: Type, list: List(A)) -> Type
#expand
{return list != nil(A)}

;; concat
;; concat
;; concat

+ :: fn($T: Type, l,m: List(T)) -> List(T)
{fork l
 {nil  return m,
  cons return l.head cons (l.tail + m)}}

concatNonEmpty :: (T:Type, l,m: List(T), nonEmpty(l), nonEmpty(m)) -> nonEmpty(l+m)
#hint
{fork l {nil, cons}}

concatNil :: ($A: Type, l: List(A)) -> l+[] = l
#hint
{fork l
 {nil,
  cons prove (l.tail + [] = l.tail) {use concatNil}
  subst l.tail + [];
  }}

concatToNil :: (A: Type, l,l1: List(A), l+l1 = []) -> l=[] /\ l1=[]
#hint
{
 fork l
 {
  nil
  norm seek([] + l1 = []);
  use conjunction
  ,
  cons
  norm seek(cons(l.head, l.tail) + l1 = [])
  }
 }

concatAssoc :: ($A: Type, l,m,n: List(A)) -> (l+m)+n = l+m+n
#hint
{
 fork l
 {
  nil ,
  cons
  => [l.head .. l.tail + m + n] = [l.head .. l.tail + m + n] {concatAssoc}
  }
 }

;; permute
;; permute
;; permute

Permute :: union($$T: Type, List(T), List(T))
{
 permuteNil() -> Permute(nil(T), nil(T))
 ,
 permuteSkip(a: T, l,l1: List(T), p: Permute(l, l1)) -> Permute(a cons l, a cons l1)
 ,
 permuteSwap(a,b: T, l: List(T)) -> Permute(a cons b cons l, b cons a cons l)
 ,
 permuteChain(l,chain,m: List(T), p1: Permute(l, chain), p2: Permute(chain, m)) -> Permute(l, m)
 }

permuteSame :: (A: Type, l: List(A)) -> Permute(l, l)
#hint
{
 fork l
 {
  nil  return permuteNil(),
  cons
  prove Permute(l.tail, l.tail) {use permuteSame};
  use permuteSkip,
  }
 }

permuteSwap :: (A: Type, l,m: List(A), p: l Permute m) -> Permute(m, l)
#hint
{
 fork p
 {
  permuteNil
  invert p;
  subst l, m;
  ,
  permuteSkip
  invert p;
  subst l, m;
  prove (p.l1 Permute p.l) {use permuteSwap}
  use permuteSkip;
  ,
  permuteSwap
  invert p;
  subst l, m;
  ;; argument 3 is obviously "p.l", there are 2 permuteSwaps
  use permuteSwap;
  ,
  permuteChain
  invert p;
  subst l, m;
  prove p.m Permute p.chain {use permuteSwap}
  prove p.chain Permute p.l {use permuteSwap}
  return permuteChain(p.m, p.chain, p.l, _, _);
  }
 }

permuteConsSwap :: (A: Type, a: A, l: List(A)) -> [a .. l] Permute l+[a]
{fork l
 {nil,
  cons
  prove (Permute(A, [a, l.head .. l.tail], [l.head, a .. l.tail])) {use permuteSwap}
  ;; [l.head, a .. l.tail]
  prove (Permute(A, [a .. l.tail], l.tail+[a])) {use permuteConsSwap}
  prove (Permute(A, [l.head, a .. l.tail], [l.head .. l.tail+[a]])) {use permuteSkip}
  ;; [l.head .. l.tail+[a]]
  return permuteChain([a, l.head .. l.tail], [l.head, a .. l.tail], [l.head .. l.tail+[a]], _, _)}}

permuteConcatLeft :: (A: Type, l,m,m': List(A), p: m Permute m') -> l+m Permute l+m'
{
 fork l
 {
  nil,
  cons 
  prove (l.tail + m Permute l.tail + m') {use permuteConcatLeft}
  use permuteSkip
  }
 }

permuteMiddle :: ((A: Type, a: A, l,m: List(A))
                  -> [a .. l+m] Permute l + [a .. m])
{fork l
 {nil,
  cons
  prove [a, l.head .. l.tail + m] Permute [l.head, a .. l.tail + m] {use permuteSwap}
  prove [l.head, a .. l.tail + m] Permute [l.head .. l.tail + [a .. m]]
  {prove [a .. l.tail + m] Permute l.tail + [a .. m] {use permuteMiddle}
   use permuteSkip}
  return permuteChain([a, l.head .. l.tail + m],
                      [l.head, a .. l.tail + m],
                      [l.head .. l.tail + [a .. m]],
                      _, _)}}

permuteOfNil :: (A: Type, l: List(A), p: l Permute []) -> l = []
{
 fork p
 {
  permuteNil
  invert p;
  ,
  permuteSkip
  invert p;
  norm seek ([] = [p.a .. p.l1]);
  ,
  permuteSwap
  invert p;
  norm seek ([] = [p.b, p.a .. p.l]);
  ,
  permuteChain
  invert p;
  prove p.chain = []
  {prove p.chain Permute [] {=> p.chain Permute p.m}
   use permuteOfNil}
  prove (p.l = [])
  {prove p.l Permute [] {=> p.l Permute p.chain}
   use permuteOfNil}
  => p.l = []
  }
 }

permuteConcatSwap :: (A: Type, l,m: List(A)) -> Permute(l+m, m+l)
#hint
{fork l
 {nil  rewrite concatNil(m),
  cons
  ;; [l.head .. l.tail + m] Permute m + [l.head .. l.tail]
  prove m + [l.head .. l.tail] Permute [l.head .. l.tail + m]
  {
   prove m + [l.head .. l.tail] Permute [l.head .. m + l.tail]
   {prove [l.head .. m + l.tail] Permute m + [l.head .. l.tail]
    {use permuteMiddle}
    use permuteSwap}

   prove [l.head .. m + l.tail] Permute [l.head .. l.tail + m]
   {prove m + l.tail Permute l.tail + m
    {use permuteConcatSwap}
    use permuteSkip}

   return permuteChain(_, [l.head .. m + l.tail], _, _, _)
   }
  use permuteSwap
  }
 }

permuteConcatRight :: (A: Type, l,l',m: List(A), p: l Permute l') -> l+m Permute l'+m
{
 prove l + m Permute m + l'
 {prove l + m Permute m + l
  {}
  prove m + l Permute m + l'
  {use permuteConcatLeft}
  return permuteChain(_,m + l, _, _,_)}

 prove m + l' Permute l' + m
 {}

 return permuteChain(_,m + l', _, _,_)
 }

;;
;; fold (I just can't make it work! it's just too ugly)
;;

;; fold :: fn($A: Type, op: binaryOp(A), a: A, l: List(A)) -> A
;; #no_print_as_binop
;; {fork l
;;  {nil
;;   return a,
;;   cons
;;   return a op fold(op, l.head, l.tail)}}

;; foldConcat :: (($T: Type, op: binaryOp(T), assoc: isAssociative(op),
;;                 a,b: T, l,m: List(T))
;;                -> (fold(op, a, l+(b cons m)) =
;;                    fold(op, a, l) op fold(op, b, m)))
;; #hint
;; {fork l
;;  {nil,
;;   cons
;;   => a op fold(op, l.head, l.tail + (b cons m)) = a op fold(op, l.head, l.tail) op fold(op, b, m) {assoc}
;;   => a op fold(op, l.head, l.tail) op fold(op, b, m) = a op fold(op, l.head, l.tail) op fold(op, b, m) {foldConcat}
;;   }}

;; foldPermute :: ($T: Type,
;;                 op: (a,b: T) -> T,
;;                 associative: (a,b,c: T) -> (a op b) op c = a op b op c,
;;                 commutative: (a,b: T) -> a op b = b op a,
;;                 a,b: T, l,m: List(T),
;;                 p: Permute(a cons l, b cons m)) -> fold(op, a, l) = fold(op, b, m)
;; {
;;  fork p
;;  {
;;   permuteNil
;;   invert p;
;;   norm seek([a .. l] = []);
;;   ,
;;   permuteSkip
;;   invert p;
;;   ,
;;   permuteSwap
;;   ,
;;   permuteChain
;;   }
;; }
