;; Permute :: union($$T: Type, List(T), List(T))
;; {
;;  permuteSame(l: List(T)) -> Permute(l,l)
;;  ,
;;  permute(a: T, $l,$b,$c: List(T), recurse: Permute(l, b+c)) ->
;;  Permute(a cons l, b + (a cons c))
;;  }

foldPermute :: ($T: Type,
                op: (a,b: T) -> T,
                associative: (a,b,c: T) -> (a op b) op c = a op b op c,
                commutative: (a,b: T) -> a op b = b op a,
                a,b: T, l,m: List(T),
                p: Permute(a cons l, b cons m)) -> fold(op, a, l) = fold(op, b, m)
{
 fork p
 {permuteSame
  i := invert(p);
  norm i;
  rewrite seek(a = b);
  rewrite seek(l = m);
  ,

  ;; bookmark Please, make these equalities better, for the children
  permute
  norm p.al_destruct;
  rewrite seek(a = p.a);
  rewrite seek(l = p.l);
  fork p.b
  {nil
   norm p.bac_destruct;
   rewrite seek(b=p.a);
   rewrite seek(m=p.c);
   norm p.recurse;

   prove (p.a cons p.l) Permute (p.a cons p.c)
   {prove (p.a cons p.l = p.a cons p.l) {} as x;
    prove (p.a cons p.c = (nil(T) + (p.a cons p.c))) {} as y;
    prove (Permute(p.l, nil(T) + p.c)) {norm;} as z;
    return permute(x, y, z)}

   return foldPermute(...)
   ,

   cons
   }
  ;; norm;
  ;; p.a op fold(op, p.l) = fold(op, p.b + (p.a cons p.c))
  ;; => p.a op fold(op, p.l) = fold(op, p.b) op fold(op, p.a cons p.c) {foldConcat}
  ;; => p.a op fold(op, p.l) = fold(op, p.b) op p.a op fold(op, p.c)
  ;; => p.a op fold(op, p.l) = (p.a op fold(op, p.c)) op fold(op, p.b) {commutative}
  ;; => p.a op fold(op, p.l) = p.a op fold(op, p.c) op fold(op, p.b) {associative}
  ;; => p.a op fold(op, p.l) = p.a op fold(op, p.b) op fold(op, p.c) {commutative}
  ;; => p.a op fold(op, p.l) = p.a op fold(op, p.b + p.c);
  ;; prove fold(op, p.l) = fold(op, p.b + p.c) {return foldPermute(...)} as e;
  ;; rewrite e,
  }
 }

;; toList :: fn($T: Type, l: PList(T)) -> List(T)
;; {fork l
;;  {single return l.head cons nil(T),
;;   cons   return l.head cons toList(l.tail)}}

;; toListNonNil :: ($T: Type, l: PList(T)) -> toList(l) != nil(T)
;; {fork l {single, cons}}

;; toListEq :: ($T: Type, $l,$m: PList(T), e: toList(l) = toList(m)) -> l = m
;; #norm(e)
;; {
;;  fork l {single
;;          fork m {single,
;;                  cons
;;                  prove(toList(m.tail) = nil(T)) {rewrite e.1} as p
;;                  return toListNonNil(m.tail)(p)
;;                  },
;;          cons
;;          fork m {single return toListNonNil(l.tail)(e.1),
;;                  cons   return ctor[0](e.0, toListEq(e.1))}
;;          }
;;  }

toPList :: fn($A: Type, a: A, l: List(A)) -> PList(A)
{fork l
 {nil  return single(a),
  cons return a cons toPList(l.head, l.tail)}}

permuteEquivalent :: ($A: Type, a,b: A, l,m: List(A),
                      p: (a cons l) Permute (b cons m))
-> toPList(a, l) Permute toPList(b, m)
{fork p
 {permuteSame
  norm p.same; rewrite seek(a=b); rewrite seek(l=m); return permuteSame(...),

  permute 
  fork p.b
  {nil
   ;; eg [0,2,3] Permute [0,3,2]
   prove (b cons m = p.a cons p.c) ;; eg b = 3, m = [2]
   {=> b cons m = p.b + (p.a cons p.c)}

   prove (p.l Permute p.c)  ;; eg [2,3] Permute [3,2]
   {=> p.l Permute p.b + p.c}

   norm p.al_destruct;
   rewrite(seek(a = p.a));
   rewrite(seek(l = p.l));
   norm p.bac_destruct;
   rewrite(seek(b = p.a));
   rewrite(seek(m = p.c));
   prove ((p.a cons p.l) Permute (p.a cons p.c))
   {=> (p.a cons p.l) Permute (nil(A) + (p.a cons p.c));
    return permute(p.a, p.l,nil(A),p.c,_,_,_)}
   return permuteEquivalent(...)
   ,
   cons
   }}}

provePermuteHelper :: fn(T: Type, a,b,c: PList(T), p: Permute(a,b), e: b=c) -> Permute(a,c)
{rewrite <- e;}

fold :: fn($A: Type, op: binaryOp(A), a: A, l: Array(A)) -> A
{
 len := toNat(length(l));
 fork len
 {
  0  return a,
  ++ return a op fold(op, get(l, 0), slice(l, 1, length(l)))
  }
 }

