define andCommutative(a, b: Bool)
: a<1> & b<1> = b<1> & a<1>
{
 fork a
 {
  false -> fork b {
                   false -> ? : 
                   true  -> 
                   }
  true  -> fork b {
                   false ->
                   true  ->
                   }
  }
 }

define plusCommutative(n, m: Nat)
: n + m = m + n
{
 fork n
 {
  0    -> plusIdRight(m<1>) : m<1> = m<1> + 0
  s(n) -> plusCommutative(n<2> + m<1>) : [
                                          n<1> + m<1> = m<1> + n<1>
                                          => s(n<2>) + m<1> = m<1> + s(n<2>)
                                          => s(n<2> + m<1>) = m<1> + s(n<2>)

                                          s(m<1> + n<2>) = m<1> + s(n<2>)
                                          ],
  }
 }
