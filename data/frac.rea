#load "frac-base.rea"

addSameDenominator :: (a,b,c: Natp) -> a/c + b/c == (a+b)/c
{
 norm;
 algebra_norm;
 }

cancelCommonFactor :: (a,b,r: Natp) -> (a*r)/(b*r) == a/b
{
 norm;
 algebra_norm;
 }

define isFactor(q,a: Natp) := exists(t: Natp), a = t*q;

relativelyPrime :: (a,b: Natp) -> Type
{
 return (r: Natp, isFactor(r, a), isFactor(r, b)) -> r = 1
 }

difference :: fn(a,b: Natp, p: b < a) -> exists(c: Natp) a = b+c
{ fork a
  { 1  unfold p; unfold p,
    ++ fork b
    { 1
      prove ++(a.p) = 1 + a.p {};
      use evidence with e=a.p;
      ,
      ++
      norm p;
      recurse := difference(a.p,b.p,p);
      prove ++(a.p) = ++(b.p) + recurse.e {norm};
      use evidence with e=recurse.e}}}

;; TODO: since we don't have nested fixpoints, we gotta hoist the function out here.
ltWellFounded_ :: (a: Natp) -> Reachable(<, a)
{
  use reachable
  { p
    fn b,p;
    fork a
    { 1  unfold p; unfold p,
      ++
      recurse := prove Reachable(<, a.p) {use ltWellFounded_};

      use reachable
      { p fn y, pyb;
        prove y < a.p { unfold;
                        unfold p; unfold p; prove b <= a.p { => b <=? a.p = true; };  ;; todo: #hack to overwrite the pointer type
                        unfold pyb;
                        use leChain with b=b;
                        };
        use (recurse.p)}}}}

ltWellFounded : WellFounded(Natp, <) := prove {norm; return ltWellFounded_};

QuotientRemainder :: union(^a, ^b: Natp)
{ divideFail(p: a<b),
  divideEvenly(quotient: Natp, p: a = quotient*b),
  divideWithRemainder(quotient: Natp, remainder: Natp,
                       p: a = quotient*b + remainder,
                       q: remainder < b) }

quotientRemainder :: fn(a,b: Natp) -> QuotientRemainder(a,b)
#measure(a, ltWellFounded)
{
  order := totalOrder(a,b);
  fork order
  { eq
    prove a = 1 * b {norm;}
    return divideEvenly(1, _)
    ,
    lt
    return divideFail(order.p)
    ,
    gt
    diff    := difference(a,b, order.p);

    ;; TODO: forcing people to use this "use" syntax isn't cool
    recurse := use quotientRemainder with a=diff.e, b=b
    #reduce { rewrite diff.p;
              prove diff.e < b + diff.e {=> diff.e < diff.e + b; use addIncreases}};

    fork recurse
    { divideFail
      use divideWithRemainder with quotient=1, remainder=diff.e;
      ,
      divideEvenly
      prove a = b + recurse.quotient * b {rewrite <- recurse.p}
      use divideEvenly with quotient = ++(recurse.quotient);
      ,
      divideWithRemainder
      prove a = (b + recurse.quotient * b) + recurse.remainder
      { => a = b + recurse.quotient * b + recurse.remainder;
        rewrite <- recurse.p;}
      use divideWithRemainder with quotient = ++(recurse.quotient), remainder = recurse.remainder
      }
    }
  }

define isCommonDivisor(q, a,b: Natp) := isFactor(q,a) /\ isFactor(q,b);

define isGcd(q, a,b: Natp) :=
isCommonDivisor(q,a,b) /\ ((q': Natp, common: isCommonDivisor(q',a,b)) -> isFactor(q', q));

define <(p1,p2: Natp /\ Natp) :=
p1.a < p2.a \/ p1.a = p2.a /\ p1.b < p2.b;

isCommonDivisorSwap :: (q,a,b: Natp, p: isCommonDivisor(q,a,b)) -> isCommonDivisor(q,b,a)
#hint
{unfold; unfold p;}

isGcdSwap :: (q,a,b: Natp, p: isGcd(q,a,b)) -> isGcd(q,b,a)
#hint
{
  unfold;
  unfold p;
  use pair
  {
    b 
    return fn q', p'
    {;; TODO :should-use-function-in-context
      use (p.b)} ,}}

isFactorReflexive :: (q: Natp) -> isFactor(q,q)
#hint
{unfold; use evidence with e=1}

factorLe :: (a,b: Natp, p: isFactor(a, b)) -> (:Type)a <= b
{ unfold p;
  fork p.e
  { 1  norm p.p; subst b;,
    ++ rewrite p.p; norm;
    prove a < a + p.e.p * a {}}}

gcdHelper :: (a,q,r: Natp, p: isFactor(a, q*a + r)) -> isFactor(a, r)
{ unfold p;
  unfold;
  d := use difference { a return p.e,
                        b return q,
                        p ;; q > p.e
                        order := totalOrder(p.e, q);
                        fork order
                        { gt,
                          eq rewrite order.p in p.p;
                          prove False {use addDifferent { a return q*a, b return r,}}
                          ,
                          lt
                          prove a * p.e < a * q {};
                          prove a * p.e < a * q + r {use ltChain with b=a*q};
                          lt := prove p.e * a < q * a + r { => a*p.e < q*a+r;
                                                            => a*p.e < a*q+r;};
                          rewrite p.p in lt;
                          prove False {use ltAntiReflexive with a=p.e * a}
                          ,
                          }};

  prove q*a + r = q*a + d.e*a
  { => q*a + r = (q + d.e)*a;
    rewrite <- d.p};

  use evidence { e return d.e,
                 p use sumCancellation with a=q*a}}

gcdMultiple :: (q,a: Natp, p: isFactor(q,a)) -> isGcd(q,q,a)
{ unfold;
  use pair
  { a unfold,
    b fn q', common {unfold common;}}}

gcd :: (a,b: Natp) -> exists(out: Natp) isGcd(out, a,b)
#measure(a, ltWellFounded)
{ ;; NOTE: we try to keep a < b.
  qr := quotientRemainder(b,a);
  fork qr
  { divideFail
    recurse := use gcd with a=b,b=a #reduce {unfold};
    use evidence with e=recurse.e;
    ,
    divideEvenly
    use evidence
    { e return a,
      p use gcdMultiple
      { p
        unfold;
        use evidence { e return qr.quotient }}};
    ,
    divideWithRemainder
    recurse := use gcd
    { a return qr.remainder,
      b return a,
      #reduce unfold; };

    unfold as recurse_p recurse.p;
    unfold recurse_p.a;
    unfold as f seek(isFactor(recurse.e, qr.remainder));
    ;; qr.remainder = recurse.e * f.e

    unfold as g seek(isFactor(recurse.e, a));

    prove b = (qr.quotient * g.e + f.e) * recurse.e
    { ;; => b = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + qr.remainder = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * g.e * recurse.e + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      algebra_norm};

    use evidence
    { e return recurse.e,
      p unfold;
      use pair
      { a unfold;
        use pair
        { a,
          b unfold;
          use evidence
          { e
            return (qr.quotient * g.e + f.e)} },

        b ;; recurse_p.b is gonna be of value here
        fn q', common;
        unfold common;
        use (recurse_p.b)
        { common
          unfold;
          use pair
          { a ;; q' divides both "a" and "qr.quotient*a + qr.remainder", so it divides "qr.remainder"
            unfold as w common.a;
            rewrite w.p in qr.p;
            prove isFactor(q', (qr.quotient * w.e) * q' + qr.remainder)
            { => isFactor(q', qr.quotient * w.e * q' + qr.remainder);
              => isFactor(q', b); }
            use gcdHelper with q=(qr.quotient * w.e);
            ,
            b}}}}}}
