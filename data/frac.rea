#load "frac-base.rea"

addSameDenominator :: (a,b,c: Natp) -> a/c + b/c == (a+b)/c
{ norm; algebra_norm;}

cancelCommonFactor :: (a,b,r: Natp) -> (a*r)/(b*r) == a/b
{ norm; algebra_norm; }

define divides(q,a: Natp) := exists(t: Natp), a = t*q;

define coprime(a,b: Natp) :=
(r: Natp, divides(r, a), divides(r, b)) -> r = 1;

difference :: fn(a,b: Natp, p: b < a) -> exists(c: Natp) a = b+c
{ fork a
  { 1  unfold p; unfold p,
    ++ fork b
    { 1
      prove ++(a.p) = 1 + a.p {};
      ex a.p;
      ,
      ++
      norm p;
      recurse := difference(a.p,b.p,p);
      prove ++(a.p) = ++(b.p) + recurse.e {norm};
      ex recurse.e}}}

;; TODO: since we don't have nested fixpoints, we gotta hoist the function out here.
ltWellFounded_ :: (a: Natp) -> Reachable(<, a)
{
  use reachable
  { p
    fn b,p;
    fork a
    { 1  unfold p; unfold p,
      ++
      recurse := prove Reachable(<, a.p) {use ltWellFounded_};
      use reachable
      { p
        fn y, pyb
        { prove y < a.p { unfold;
                          unfold p; unfold p; prove b <= a.p { => b <=? a.p = true; };  ;; todo: #hack to overwrite the pointer type
                          unfold pyb;
                          use leChain {b=b}};
          use recurse.p}}}}}

ltWellFounded : WellFounded(Natp, <) := prove {norm; return ltWellFounded_};

QuotientRemainder :: union(^a, ^b: Natp)
{ divideFail(p: a<b),
  divideEvenly(quotient: Natp, p: a = quotient*b),
  divideWithRemainder(quotient: Natp, remainder: Natp,
                       p: a = quotient*b + remainder,
                       q: remainder < b) }

quotientRemainder :: fn(a,b: Natp) -> QuotientRemainder(a,b)
#measure(a, ltWellFounded)
{
  order := totalOrder(a,b);
  fork order
  { eq
    prove a = 1 * b {norm;}
    return divideEvenly(1, _)
    ,
    lt
    return divideFail(order.p)
    ,
    gt
    diff    := difference(a,b, order.p);

    ;; TODO: forcing people to use this "use" syntax isn't cool
    recurse := use quotientRemainder
    { a=diff.e, b=b,
      #reduce { rewrite diff.p;
                prove diff.e < b + diff.e {=> diff.e < diff.e + b; use addIncreases}}};

    fork recurse
    { divideFail
      use divideWithRemainder {quotient=1, remainder=diff.e};
      ,
      divideEvenly
      prove a = b + recurse.quotient * b {rewrite <- recurse.p}
      use divideEvenly {quotient = ++(recurse.quotient)};
      ,
      divideWithRemainder
      prove a = (b + recurse.quotient * b) + recurse.remainder
      { => a = b + recurse.quotient * b + recurse.remainder;
        rewrite <- recurse.p;}
      use divideWithRemainder {quotient = ++(recurse.quotient), remainder = recurse.remainder}}}}

define isGcd(q, a,b: Natp) :=
divides(q,a) /\ divides(q,b) /\ ((q': Natp, da: divides(q',a), db: divides(q',b)) -> divides(q', q));

isGcdSwap :: (q,a,b: Natp, p: isGcd(q,a,b)) -> isGcd(q,b,a)
#hint
{ unfold; unfold p;
  pose fn (q': Natp, da: divides(q', b), db: divides(q', a)) -> divides(q', q)
  { use p.b.b;};}

dividesReflexive :: (q: Natp) -> divides(q,q)
#hint
{unfold; ex 1}

dividesLe :: (a,b: Natp, p: divides(a, b)) -> a <= b
{ unfold p;
  fork p.e
  { 1  norm p.p; subst b;,
    ++ rewrite p.p; norm;
    prove a < a + p.e.p * a {}}}

gcdHelper :: (a,q,r: Natp, p: divides(a, q*a + r)) -> divides(a, r)
{ unfold p;
  unfold;
  d := use difference { a = p.e,
                        b = q,
                        p ;; q > p.e
                        order := totalOrder(p.e, q);
                        fork order
                        { gt,
                          eq rewrite order.p in p.p;
                          prove False {use addDifferent { a return q*a, b return r,}}
                          ,
                          lt
                          prove a * p.e < a * q {};
                          prove a * p.e < a * q + r {use ltChain {b=a*q}};
                          lt := prove p.e * a < q * a + r { => a*p.e < q*a+r;
                                                            => a*p.e < a*q+r;};
                          rewrite p.p in lt;
                          prove False {use ltAntiReflexive {a=p.e * a}}
                          ,
                          }};

  prove q*a + r = q*a + d.e*a
  { => q*a + r = (q + d.e)*a;
    rewrite <- d.p};

  ex d.e {use sumCancellation {a=q*a}}}

gcdMultiple :: (q,a: Natp, p: divides(q,a)) -> isGcd(q,q,a)
{ unfold;
  pose fn (q': Natp, da: divides(q', q), db: divides(q', a)) -> divides(q', q) {};}

gcd :: (a,b: Natp) -> exists(g: Natp) isGcd(g, a,b)
#measure(a, ltWellFounded)
{ ;; NOTE: we try to keep a < b.
  qr := quotientRemainder(b,a);
  fork qr
  { divideFail
    recurse := use gcd {a=b,b=a, #reduce {unfold}};
    ex recurse.e;
    ,
    divideEvenly
    ex a
    { use gcdMultiple
      { p
        unfold;
        use ex { e return qr.quotient }}};
    ,
    divideWithRemainder
    recurse := use gcd
    { a return qr.remainder,
      b return a,
      #reduce unfold; };

    unfold as recurse_p recurse.p;
    unfold recurse_p.a;
    unfold as f seek(divides(recurse.e, qr.remainder));
    ;; qr.remainder = recurse.e * f.e

    unfold as g seek(divides(recurse.e, a));

    prove
    { => b = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + qr.remainder = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * g.e * recurse.e + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      algebra_norm};

    use ex
    { e return recurse.e,
      p unfold;
      prove divides(recurse.e, b) {unfold; use ex { e = (qr.quotient * g.e + f.e)}}
      prove (q': Natp, da: divides(q', a), db: divides(q', b)) -> divides(q', recurse.e)
      { fn;
        use recurse_p.b.b
        { da
          ;; q' divides both "a" and "qr.quotient*a + qr.remainder", so it divides "qr.remainder"
          unfold as w da;
          rewrite w.p in qr.p;
          prove
          { => divides(q', (qr.quotient * w.e) * q' + qr.remainder);
            => divides(q', qr.quotient * w.e * q' + qr.remainder);
            => divides(q', b); }
          use gcdHelper {q=(qr.quotient * w.e)}}}}}}

dividesAntiSymmetric :: (a,b: Natp, fab: divides(a,b), fba: divides(b,a)) -> a=b
{ prove a <= b {use dividesLe};
  prove b <= a {use dividesLe};
  use leAntiSymmetric }

gcdUnique :: (a,b,q,q': Natp, hq: isGcd(q,a,b), hq': isGcd(q',a,b)) -> q=q'
{ unfold hq; unfold hq';
  prove divides(q, q') {use hq'.b.b}
  prove divides(q', q) {use hq.b.b}
  use dividesAntiSymmetric }

reduce :: (x:Fracb) -> exists(y:Fracb) x == y /\ coprime(y.n, y.d)
{ G := gcd(x.n, x.d); alias g G.e;
  unfold as h G.p;
  unfold as p seek(divides(g, x.n));
  unfold as q seek(divides(g, x.d));
  ex p.e / q.e
  { prove (x.n * q.e = x.d * p.e)
    { => (p.e * g) * q.e = x.d * p.e;
      => (p.e * g) * q.e = (q.e * g) * p.e;
      => (p.e * g) * q.e = p.e * q.e * g;
      => (p.e * g) * q.e = p.e * g * q.e; }

    prove coprime(p.e, q.e)
    { unfold;
      fn r, rp, rq
      { ;; if r > 1, then we have a conflict with g
        unfold rp; unfold rq;
        prove { => x.n = rp.e * (r * g);
                => x.n = (rp.e * r) * g;
                => x.n = p.e * g; } as numerDecompose;
        prove { => x.d = rq.e * (r * g);
                => x.d = (rq.e * r) * g;
                => x.d = q.e * g; } as denomDecompose;

        prove divides(r * g, x.n)
        { => exists(t: Natp) x.n = t * r * g;
          ex rp.e}
        prove divides(r * g, x.d)
        { => exists(t: Natp) x.d = t * r * g;
          ex rq.e}

        prove divides(r*g, g) {use h.b.b}
        prove divides(g, r*g) {unfold; use ex {e = r}}
        prove g = r * g {use dividesAntiSymmetric}
        use mulCancellation1 {b=g}}}}}

elimCoprime :: (a,b,c: Natp, coprime(a,b), divides(a, b*c)) -> divides(a,c)
{}

reduceUnique :: (a,b: Frac) -> reduce(a) = reduce(b)
{
  
  }
