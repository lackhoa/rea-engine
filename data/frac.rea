#load "frac-base.rea"

define divides(q,a: Natp) := exists(t: Natp), a = t*q;

define coprime(a,b: Natp) :=
(r: Natp, da: divides(r, a), db: divides(r, b)) -> r = 1;

difference :: fn(a,b: Natp, p: b<a) -> exists(c:Natp) a=b+c
{ fork a
  { 1  unfold p; unfold p, ;; invalid
    ++ fork b
    { 1  ex a.p {},
      ++ unfold p; unfold p; prove b.p < a.p {}
      recurse := difference(a.p,b.p,_);
      ex recurse.e {}}}}

;; TODO: since we don't have nested fixpoints, we gotta hoist the function out here.
ltWellFounded_ :: (a: Natp) -> Reachable(<, a)
{ use reachable
  { p
    fn b,p;
    fork a
    { 1  unfold p; unfold p,
      ++
      recurse := prove Reachable(<, a.p) {use ltWellFounded_};
      use reachable
      { p
        fn y, pyb
        { prove y < a.p { unfold;
                          unfold p; unfold p; prove b <= a.p { => b <=? a.p = true; };  ;; todo: #hack to overwrite the pointer type
                          unfold pyb;
                          use leChain {b=b}};
          use recurse.p}}}}}

ltWellFounded : WellFounded(Natp, <) := prove {norm; return ltWellFounded_};

QuotientRemainder :: union(^a,^b: Natp)
{ divideFail(p: a<b),
  divideEvenly(quotient: Natp, p: a = quotient*b),
  divideWithRemainder(quotient: Natp, remainder: Natp,
                       p: a = quotient*b + remainder,
                       q: remainder < b) }

quotientRemainder :: fn(a,b: Natp) -> QuotientRemainder(a,b)
#measure(a, ltWellFounded)
{ ;; NOTE think "a / b"
  order := totalOrder(a,b);
  fork order
  { lt use divideFail {}
    ,
    eq
    use divideEvenly {quotient=1}
    ,
    gt
    diff := difference(a,b,_);
    recurse := use quotientRemainder
    { a=diff.e, b=b,
      #reduce { rewrite diff.p;
                prove diff.e < b + diff.e {=> diff.e < diff.e + b; use addIncreases}}};

    fork recurse
    { divideFail
      use divideWithRemainder {quotient=1, remainder=diff.e};
      ,
      divideEvenly
      prove a = b + recurse.quotient * b {rewrite <- recurse.p}
      use divideEvenly {quotient = ++(recurse.quotient)};
      ,
      divideWithRemainder
      prove a = (b + recurse.quotient * b) + recurse.remainder
      { => a = b + recurse.quotient * b + recurse.remainder;
        rewrite <- recurse.p;}
      use divideWithRemainder {quotient = ++(recurse.quotient), remainder = recurse.remainder}}}}

define isGcd(q, a,b: Natp) :=
divides(q,a) /\ divides(q,b) /\ ((q': Natp, da: divides(q',a), db: divides(q',b)) -> divides(q', q));

isGcdSwap :: (q,a,b: Natp, p: isGcd(q,a,b)) -> isGcd(q,b,a)
#hint
{ unfold; unfold p;
  pose fn (q': Natp, da: divides(q', b), db: divides(q', a)) -> divides(q', q)
  { use p.b.b;};}

dividesReflexive :: (q: Natp) -> divides(q,q)
#hint
{unfold; ex 1}

dividesLe :: (a,b: Natp, p: divides(a, b)) -> a <= b
{ unfold p;
  fork p.e
  { 1  norm p.p; subst b;,
    ++ rewrite p.p; norm;
    prove a < a + p.e.p * a {}}}

gcdHelper :: (a,q,r: Natp, p: divides(a, q*a + r)) -> divides(a, r)
{ unfold p;
  unfold;
  d := use difference { a = p.e,
                        b = q,
                        p ;; q > p.e
                        order := totalOrder(p.e, q);
                        fork order
                        { gt,
                          eq rewrite order.p in p.p;
                          prove False {use addDifferent { a return q*a, b return r,}}
                          ,
                          lt
                          prove a * p.e < a * q {};
                          prove a * p.e < a * q + r {use ltChain {b=a*q}};
                          lt := prove p.e * a < q * a + r { => a*p.e < q*a+r;
                                                            => a*p.e < a*q+r;};
                          rewrite p.p in lt;
                          prove False {use ltAntiReflexive {a=p.e * a}}
                          ,
                          }};

  prove q*a + r = q*a + d.e*a
  { => q*a + r = (q + d.e)*a;
    rewrite <- d.p};

  ex d.e {use sumCancel {a=q*a}}}

gcdMultiple :: (q,a: Natp, p: divides(q,a)) -> isGcd(q,q,a)
{ unfold;
  pose fn (q': Natp, da: divides(q', q), db: divides(q', a)) -> divides(q', q) {};}

gcd :: (a,b: Natp) -> exists(g: Natp) isGcd(g, a,b)
#measure(a, ltWellFounded)
{ ;; NOTE: we try to keep a < b.
  qr := quotientRemainder(b,a);
  fork qr
  { divideFail
    recurse := use gcd {a=b,b=a, #reduce {unfold}};
    ex recurse.e;
    ,
    divideEvenly
    ex a
    { use gcdMultiple
      { p
        unfold;
        use ex { e return qr.quotient }}};
    ,
    divideWithRemainder
    recurse := use gcd
    { a return qr.remainder,
      b return a,
      #reduce unfold; };

    unfold as recurse_p recurse.p;
    unfold recurse_p.a;
    unfold as f seek(divides(recurse.e, qr.remainder));
    ;; qr.remainder = recurse.e * f.e

    unfold as g seek(divides(recurse.e, a));

    prove
    { => b = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + qr.remainder = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * a + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      => qr.quotient * g.e * recurse.e + f.e * recurse.e = (qr.quotient * g.e + f.e) * recurse.e;
      algebra_norm};

    use ex
    { e return recurse.e,
      p unfold;
      prove divides(recurse.e, b) {unfold; use ex { e = (qr.quotient * g.e + f.e)}}
      prove (q': Natp, da: divides(q', a), db: divides(q', b)) -> divides(q', recurse.e)
      { fn;
        use recurse_p.b.b
        { da
          ;; q' divides both "a" and "qr.quotient*a + qr.remainder", so it divides "qr.remainder"
          unfold as w da;
          rewrite w.p in qr.p;
          prove
          { => divides(q', (qr.quotient * w.e) * q' + qr.remainder);
            => divides(q', qr.quotient * w.e * q' + qr.remainder);
            => divides(q', b); }
          use gcdHelper {q=(qr.quotient * w.e)}}}}}}

dividesAntiSymmetric :: (a,b: Natp, fab: divides(a,b), fba: divides(b,a)) -> a=b
{ prove a <= b {use dividesLe};
  prove b <= a {use dividesLe};
  use leAntiSymmetric }

gcdUnique :: (a,b,q,q': Natp, hq: isGcd(q,a,b), hq': isGcd(q',a,b)) -> q=q'
{ unfold hq; unfold hq';
  prove divides(q, q') {use hq'.b.b}
  prove divides(q', q) {use hq.b.b}
  use dividesAntiSymmetric }

FracFactor :: union {fracFactor(g,n,d: Natp)}

reduce :: (a,b: Natp) -> exists(y:FracFactor) a = y.g*y.n /\ b = y.g*y.d /\ coprime(y.n, y.d)
{ G := gcd(a, b); alias g G.e;
  unfold as h G.p;
  unfold as p seek(divides(g, a));
  unfold as q seek(divides(g, b));
  ex fracFactor(g, p.e, q.e)
  { prove (a * q.e = b * p.e)
    { => (p.e * g) * q.e = b * p.e;
      => (p.e * g) * q.e = (q.e * g) * p.e;
      => (p.e * g) * q.e = p.e * q.e * g;
      => (p.e * g) * q.e = p.e * g * q.e; }

    prove a = g * p.e {=> a = p.e * g}
    prove b = g * q.e {=> b = q.e * g}

    prove coprime(p.e, q.e)
    { unfold;
      fn r, rp, rq
      { ;; if r > 1, then we have a conflict with g
        unfold rp; unfold rq;
        prove { => a = rp.e * (r * g);
                => a = (rp.e * r) * g;
                => a = p.e * g; } as numerDecompose;
        prove { => b = rq.e * (r * g);
                => b = (rq.e * r) * g;
                => b = q.e * g; } as denomDecompose;

        prove divides(r * g, a)
        { => exists(t: Natp) a = t * r * g;
          ex rp.e}
        prove divides(r * g, b)
        { => exists(t: Natp) b = t * r * g;
          ex rq.e}

        prove divides(r*g, g) {use h.b.b}
        prove divides(g, r*g) {unfold; use ex {e = r}}
        prove g = r * g {use dividesAntiSymmetric}
        use mulCancel1 {b=g}}}}}

coprimeFracImpossible ::
(a,b,d,q,r:Natp, P: a*d=b*(q*a + r), P1: coprime(a,b), P2: r < a) -> False
#measure(a, ltWellFounded)
{ P3 := prove divides(a,b*r)
  { prove { => a*d = (b*q)*a + b*r;
            => a*d = b*q*a + b*r;
            => a*d = b * (q*a + r);}
    prove divides(a, (b*q)*a + b*r)
    {unfold; ex d { => (b*q)*a + b*r = a*d;  ;; todo :cannot-solve-goal-simple-equality
                    => a*d = a*d;}}
    use gcdHelper { q=(b*q)}};

  unfold P3; alias e P3.e;
  P4 := reduce(r,e); alias r' P4.e.n; alias e' P4.e.d; alias g P4.e.g;
  a_div_r := quotientRemainder(a,r');
  r'_le_a := prove r'<a {use leLtChain {b=r, P => r' <= r; => r' <= g*r'; use leMul {}}};
  fork a_div_r
  { divideFail
    use ltAntiReflexive2
    { a=a, b=r,
      p => a < r; use ltLeChain { b=r', Q => r' <= r; => r' <= g*r'; use leMul}},

    divideEvenly alias x a_div_r.quotient;
    prove x=1
    { unfold P1;
      prove divides(x,a) {unfold; ex r'; => x*r' = r'*x;}
      prove divides(x,b)
      { unfold;
        ex e'
        { => b = e'*x;
          prove { => b*r = (e'*x)*r;
                  => b*r = (e'*x)*g*r';
                  => b*r = ((e'*x)*g)*r';
                  => b*r = (g*e'*x)*r';
                  => b*r = ((g*e')*x)*r';
                  => b*r = (e*x)*r';
                  => b*r = e*(x*r');
                  => b*r = e*a;}
          use mulCancelRight{c=r}}}
      use P1 {}}
    prove a=r' {=> a=1*r'; => a=x*r'}
    prove r'<r' {=> r'<a; }
    use ltAntiReflexive {a=r'}
    ,

    divideWithRemainder alias q' a_div_r.quotient; alias r1 a_div_r.remainder;
    use coprimeFracImpossible
    { a=r', b=e', d=b, q=q', r=r1,
      P
      => r'*b = e'*(q' * r' + r1);
      prove { => g*r'*b = g*e'*(q' * r' + r1);
              => (g*r')*b = g*e'*(q' * r' + r1);
              => r*b = g*e'*(q' * r' + r1);
              => r*b = (g*e')*(q' * r' + r1);
              => r*b = e*(q' * r' + r1);
              => r*b = e*a;
              => b*r = e*a;}
      use mulCancelLeft{c=g};,

      #reduce = r'_le_a}}}

coprimeFracEq :: (a,b,c,d: Natp, E: a*d=b*c, Cab: coprime(a,b), Ccd: coprime(c,d)) -> a=c /\ b=d
#measure(a, ltWellFounded)
{ c_div_a := quotientRemainder(c,a);
  fork c_div_a
  { divideFail
    recurse := use coprimeFracEq
    { a=c, b=d, c=a, d=b,
      E => c*b = d*a => b*c = d*a => b*c = a*d => a*d = a*d,
      #reduce};
    use pair { a => a=c => a=a,
               b => b=d => b=b,},

    divideEvenly alias q c_div_a.quotient;
    prove d = q * b
    { => d = b * q;
      prove { => d * a = (b * q) * a
              => d * a = b * q * a
              => a * d = b * q * a
              => a * d = b * c}
      use mulCancelRight {c=a}}
    prove q=1
    { unfold Ccd;
      use Ccd { da => divides(q,c); unfold; ex a { => c=q*a},
                db => divides(q,d); unfold; ex b { => d=q*b}};}
    use pair
    { a => a=c => a=q*a => a=1*a,
      b => b=d => b=q*b => b=1*b}
    , 

    divideWithRemainder alias q c_div_a.quotient; alias r c_div_a.remainder;
    prove False 
    {use coprimeFracImpossible { P
                                 => a*d = b*(q*a + r)
                                 => a*d = b*c}}}}

;; TODO: hack for this: exists(y:Frac) x == y /\ coprime(y.n, y.d)
FracReduce :: union(^x:Frac)
{ fracReduce(e: Frac, eq: x==e, co: coprime(e.n, e.d)) }

reduce_ :: (x:Frac) -> FracReduce(x)
#no_expand  ;; TODO: just a hack until we have Set/Prop
{ R := reduce(x.n,x.d); alias g R.e.g; alias n R.e.n; alias d R.e.d;
  use fracReduce
  { e=n/d,
    eq
    => x.n * d = x.d * n
    => x.n * d = (g*d) * n
    => (g*n)*d = (g*d)*n
    => g*n*d = (g*d)*n
    => g*d*n = (g*d)*n
    => (g*d)*n = (g*d)*n}}

reduce :: fn (x:Frac) -> Frac
#no_expand
{ red := reduce_(x);
  return red.e; }

getEvidence :: ($T: Type, $prop: T -> Type, e: Exists(prop)) -> T
{ return e.e }

reduceUnique :: (x,y: Frac, E: x==y) -> reduce(x) = reduce(y)
{ redx := reduce_(x);
  redy := reduce_(y);
  ;; ^ retrieve the full arguments
  let_eq redx as Hrx;
  let_eq redy as Hry;
  prove reduce(x) = redx.e { unfold(reduce); rewrite <- Hrx}
  prove reduce(y) = redy.e { unfold(reduce); rewrite <- Hry}

  alias a redx.e.n; alias b redx.e.d;
  alias c redy.e.n; alias d redy.e.d;

  => a/b = reduce(y);
  => a/b = c/d;

  prove a*d = b*c
  { => a/b == c/d {};
    prove c/d == a/b
    { prove c/d == x { prove x == c/d {use eqChain {b=y}} use eqSwap}
      use eqChain {b=x}}
    use eqSwap}

  prove (a=c /\ b=d) {use coprimeFracEq {}}

  => c/b = c/d
  => c/d = c/d
  }

reduceEq :: (x: Frac) -> reduce(x) == x
#hint
{ redx := reduce_(x);
  let_eq redx as Hrx;
  prove reduce(x) = redx.e { unfold(reduce); rewrite <- Hrx}
  => redx.e == x}

+ :: fn(a,b: Frac) -> Frac
#tag(Frac) #no_expand
{return reduce(a+/b)}

* :: fn(a,b: Frac) -> Frac
#tag(Frac) #no_expand
{return reduce(a*/b)}

addCommutative :: (a,b: Frac) -> a+b = b+a
#hint #tag(Frac)
{ unfold(+); norm; use reduceUnique}

addAssociative :: (a,b,c: Frac) -> (a+b)+c = a+b+c
#hint #tag(Frac)
{ unfold(+); norm;
  prove reduce(a +/ b) +/ c == a +/ reduce(b +/ c)
  { prove reduce(a +/ b) +/ c == (a +/ b) +/ c { use addWellDefined }
    prove (a +/ b) +/ c == a +/ reduce(b +/ c)
    { prove (a +/ b) +/ c == a +/ b +/ c {use addAssociative'}
      prove a +/ b +/ c == a +/ reduce(b +/ c) {use addWellDefined}
      use eqChain {b=a +/ b +/ c}}
    use eqChain {b=(a +/ b) +/ c}}
  use reduceUnique
  }

mulCommutative :: (a,b: Frac) -> a*b = b*a
#hint #tag(Frac)
{ unfold(*); norm; use reduceUnique}

mulAssociative :: (a,b,c: Frac) -> (a*b)*c = a*b*c
#hint #tag(Frac)
{ unfold(*); norm;
  prove reduce(a */ b) */ c == a */ reduce(b */ c)
  { use eqChain
    { b=(a */ b) */ c,
      P use mulWellDefined,
      Q use eqChain
      { b=a */ b */ c,
        Q use mulWellDefined}}}
  use reduceUnique}

mulDistributive :: (a,b,c: Frac) -> (a+b)*c = a*c+b*c
#hint #tag(Frac, right)
{ unfold(*); unfold(+); norm;
  prove reduce(a +/ b) */ c == reduce(a */ c) +/ reduce(b */ c)
  { use eqChain
    { b=(a +/ b) */ c,
      P use mulWellDefined,
      Q use eqChain
      { b=a*/c +/ b*/c,
        Q use addWellDefined}}}
  use reduceUnique}

mulDistributive :: (a,b,c: Frac) -> c*(a+b) = c*a+c*b
#hint #tag(Frac, left)
{ => (a+b)*c = c*a+c*b
  => (a+b)*c = a*c+c*b
  => (a+b)*c = a*c+b*c}

algebra_declare Frac;
