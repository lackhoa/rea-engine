#load "frac-base.rea"

addSameDenominator :: (a,b,c: Natp) -> a/c + b/c == (a+b)/c
{
 norm;
 algebra_norm;
 }

cancelCommonFactor :: (a,b,r: Natp) -> (a*r)/(b*r) == a/b
{
 norm;
 algebra_norm;
 }

isFactor :: (r,a: Natp) -> Type
#expand
{
  return exists(t: Natp), a = r*t
  }

relativelyPrime :: (a,b: Natp) -> Type
#expand
{
 return (r: Natp, isFactor(r, a), isFactor(r, b)) -> r = 1
 }

difference :: fn(a,b: Natp, p: a > b = true) -> exists(c: Natp) a = b+c
{ fork a
  { 1  norm p,
    ++ fork b
    { 1
      prove ++(a.p) = 1 + a.p {};
      use evidence with e=a.p;
      ,
      ++
      norm p;
      recurse := difference(a.p,b.p,p);
      prove ++(a.p) = ++(b.p) + recurse.e {norm};
      use evidence with e=recurse.e}}}

QuotientRemainder :: union(^a, ^b: Natp)
{ divideFail(p: b>a = true),
  divideEvenly(quotient: Natp, p: a = quotient*b),
  divideWithRemainder(quotient: Natp, remainder: Natp, p: a = quotient*b + remainder)}

Reachable :: union(^R: (a :Natp, b :Natp) -> Type, ^x: Natp)
{
  reachable(p: (y: Natp, lt: y R x) -> Reachable(R, y))
  }

WellFounded :: fn(R: (a: Natp, b: Natp) -> Type) -> Type
{
  return (a: Natp) -> Reachable(R, a)
  }

le :: fn(a,b: Natp) -> Type
#expand
{
  return a <= b = true
  }

lt :: fn(a,b: Natp) -> Type
#expand
{
  return a < b = true
  }

le1 :: ($a: Natp, p: a le 1) -> a=1
{fork a {1, ++ norm p;}}

ltLemma :: (a,b: Natp, p: a lt ++(b)) -> a=b \/ a lt b
{
  fork a
  {
    1 fork b {1 use leftDisjunct, ++ use rightDisjunct}
    ,
    ++ fork b
    { 1 norm p,
      ++
      norm p;
      recurse := use ltLemma with a=a.p, b=b.p, p=p;
      norm recurse;
      }
    }
  }

leChain :: (a,b,c: Natp, p: a le b, q: b le c) -> a le c
#norm(p,q)
{
  fork c
  { 1 pose le1(q); rewrite b=1 in p,
    ++ fork b
    { 1  pose le1(p); rewrite a=1, 
      ++ fork a
      { 1  ,
        ++ use leChain with b=b.p
        }
      }}
  }

ltChain :: (a,b,c: Natp, p: a lt b, q: b lt c) -> a lt c
{
  fork c
  {
    1  norm q,
    ++ fork b
    {1 norm p,
      ++ fork a {1, ++ norm p; norm q;
                  prove a.p lt b.p {norm};
                  prove b.p lt c.p {norm};
                  use ltChain with b=b.p}}
    }
  }

;; TODO: since we don't have nested fixpoints, we gotta hoist the function out here.
ltWellFounded :: (a: Natp) -> Reachable(lt,a)
{
  pose fn (b: Natp, p: b lt a) -> Reachable(lt, b)
  {
    fork a
    {
      1  norm p,
      ++ norm p;
      recurse := prove Reachable(lt, a.p) {use ltWellFounded};

      pose fn (y: Natp, pyb: y lt b) -> Reachable(lt,y)
      {
        chain := prove y lt a.p {use leChain with b=b};
        use (recurse.p)
        };

      use reachable;
      }
    };
  use reachable;
  }

ltWellFounded : WellFounded(lt) := prove {norm; return ltWellFounded};

quotientRemainder :: fn(a,b: Natp) -> QuotientRemainder(a,b)
{order := totalOrder(a,b);
  fork order
  {eq
    prove a = 1 * b {norm;}
    return divideEvenly(1, _)
    ,
    lt
    return divideFail(order.p)
    ,
    gt
    diff    := difference(a,b, order.p);
    recurse := quotientRemainder(diff.e, b);
    }}

gcd :: (a,b: Natp) -> Maybe(Natp)
{qr := quotientRemainder(a,b);
  fork qr
  {divideFail return none()
    ,
    divideEvenly return some(qr.quotient)
    ,
    divideWithRemainder
    return gcd(b, qr.remainder)
    }}

quotientRemainderCorrect ::
((a,b: Natp, q,r: Natp, e: quotientRemainder(a,b) = divideWithRemainder(q,r)) ->
 a = q*b + r)
{
 fork a
 {
  1 ,
  }
 }
