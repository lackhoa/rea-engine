#load "nat.rea"

Natp :: union {1, ++(p: Natp)}

+ :: fn(a,b: Natp) -> Natp
#tag(Natp)
{fork a
 {1:  return ++(b),
  ++: return ++(a.p + b)}}

* :: fn(a,b: Natp) -> Natp
#tag(Natp)
{
 fork a
 {
  1:  return b,
  ++: return b + (a.p * b),
  }
 }

add1 :: (a: Natp) -> a+1 = ++(a)
{
 fork a
 {
  1:  ,
  ++: rewrite  add1(a.p)
  }
 }

addS :: (a,b: Natp) -> a + ++(b) = ++(a + b)
{
 fork a
 {
  1,
  ++ rewrite  addS(a.p, b)
  }
 }

addCommutative :: (a,b: Natp) -> (a+b = b+a)
#hint #tag(Natp)
{fork a
 {1: rewrite  add1(b),
  ++: rewrite  addS(b, a.p); rewrite  addCommutative(a.p, b)}}

addAssociative :: (a,b,c: Natp) -> (a+b)+c = a+b+c
#hint #tag(Natp)
{fork a
 {1,
  ++ rewrite  addAssociative(a.p, b, c)}}

mulDistributive :: (a,b,c: Natp) -> (a+b)*c = a*c+b*c
#hint #tag(Natp, right)
{fork a
 {1,
  ++
  => c + (a.p + b) * c = c + (a.p * c + b * c) {addAssociative}
  => c + (a.p + b) * c = c + ((a.p + b) * c) {mulDistributive(a.p,b,c)}}}

mul1 :: (a: Natp) -> a*1 = a
{fork a
 {1 : ,
  ++: rewrite  mul1(a.p)}}
test_eval mul1;

mulSRight :: (a,b: Natp) -> a * ++(b) = a + a*b
#tag(Natp)
{fork a
 {1:,
  ++:
  => ++(b + a.p * ++(b))   = ++(a.p + b + a.p*b) {}
  => ++(b + a.p + a.p*b)   = ++(a.p + b + a.p*b) { mulSRight(a.p, b) }
  => ++((a.p + a.p*b) + b) = ++(a.p + b + a.p*b) { addCommutative }
  => ++(a.p + a.p*b + b)   = ++(a.p + b + a.p*b) { addAssociative(a.p, a.p*b, b) }
  => ++(a.p + a.p*b + b)   = ++(a.p + a.p*b + b) { addCommutative }}}
test_eval overload(mulSRight, Natp);

mulCommutative :: (a,b: Natp) -> a*b = b*a
#hint #tag(Natp)
{fork a
 {1 : rewrite  mul1(b),
  ++: ;; b + a.p*b = b * ++(a.p)
  => b + a.p*b = b + b*a.p { mulSRight(b, a.p) }
  => b + a.p*b = b + a.p*b { mulCommutative(a.p, b) }}}

mulAssociative :: (a,b,c: Natp) -> (a*b)*c = a*b*c
#hint #tag(Natp)
{fork a
 {1,
  ++ ;; (b + a.p * b) * c = b * c + a.p * b * c
  => (b + a.p * b) * c = b * c + (a.p * b) * c {mulAssociative(a.p, b, c)}
  => (b + a.p * b) * c = (b + a.p * b) * c     {mulDistributive}
  }}

;; todo this really should be built-in
successorIsDifferent :: (a: Natp, P: ++(a) = a) -> False
#norm(P)
{
 fork a
 {
  1:  return P,
  ++: return successorIsDifferent(a.p, P)
  ,
  }
 }

;; todo this really should be built-in
differentFromTwoSuccessor :: (a: Natp, P: ++(++(a)) = a) -> False
#norm(P)
{fork a
 {1:  return P,
  ++: return differentFromTwoSuccessor(a.p, P)}}

<=? :: fn(a,b: Natp) -> Bool
{fork a
 {1 : return true,
  ++: fork b {1: return false, ++: return a.p <=? b.p}}}

define <=(a,b: Natp) := a <=? b = true;
define <(a,b: Natp)  := ++(a) <= b;

leReflexive :: (a: Natp) -> a <= a
#hint
{ fork a {1 unfold, ++ unfold; => a.p <= a.p; use leReflexive} }

ltSuccessor :: (a: Natp) -> a < ++(a)
#hint
{fork a
 {1  unfold; unfold,
  ++ unfold; }}

ltAntiReflexive :: (a: Natp, p: a < a) -> False
{fork a
 { 1  unfold p,
   ++ unfold p; unfold p; prove a.p < a.p {unfold;}; use ltAntiReflexive {a return a.p}}}

ltChain :: (a,b,c: Natp, P: a < b, Q: b < c) -> a < c
{ fork c {
           1  unfold Q; unfold Q,
           ++ fork b { 1 unfold P; unfold P ; fork P {},
                       ++ fork a { 1  unfold; unfold,
                                   ++ unfold; unfold;
                                   => a.p < c.p;
                                   use ltChain {b=b.p}}}}}

ltAntiReflexive2 :: (a,b: Natp, p: a<b, q: b<a) -> False
#hint
{prove a<a {use ltChain {b=b}}; use ltAntiReflexive{a=a}}

addIncreases :: (a,b: Natp) -> a < a+b
#hint
{
  fork a { 1  unfold; unfold;,
           ++ unfold; unfold;
           => a.p < a.p + b;
           return addIncreases(a.p, b)}
 }

addDifferent :: (a,b: Natp, p: a+b = a) -> False
#norm(p)
{
 lem1: a < a + b := addIncreases(a,b);
 rewrite p in lem1;
 return ltAntiReflexive(a, lem1);
 }

sumCancel :: (a,b,c: Natp, p: a + b = a + c) -> (b = c)
#norm(p)
{
 fork a {
         1  return p,
         ++ return sumCancel(a.p,b,c, p)}
 }

=? :: fn(a,b: Natp) -> Bool
{
 fork a
 {
  1  fork b {1 return true,  ++ return false},
  ++ fork b {1 return false, ++ return a.p =? b.p}
  }
 }

add1DifferentFromAddS :: (a,b: Natp) -> a + 1 =? a + ++(b) = false
{fork a
 {1,
  ++ return add1DifferentFromAddS(a.p, b);}}

eqSymmetric :: (a,b: Natp, p: a=?b = true) -> (b=?a = true)
#norm(p)
{fork a
 {1  fork b {1, ++ return p},
  ++ fork b {1 return p,
             ++ return eqSymmetric(a.p, b.p, p)}}}

sumCancel :: (a,b,c: Natp, p: a+b =? a+c = true) -> (b =? c = true)
#norm(p)
{
 fork a {
         1 return p,
         ++ fork b
         {1
          fork c
          {1,
           ++
           prove (a.p + 1 =? a.p + ++(c.p) = false) {return add1DifferentFromAddS(a.p, c.p)} as x;
           rewrite  x in p;
           norm p;
           },
          ++ fork c
          {1
           lem1 := eqSymmetric(a.p + ++(b.p), a.p + 1, p);
           lem2 := add1DifferentFromAddS(a.p, b.p);
           rewrite  lem1 in lem2;
           norm lem2;
           ,
           ++
           lem1 : ++(b.p) + a.p =? ++(c.p) + a.p = true :=
           prove {=> a.p + ++(b.p) =? ++(c.p) + a.p = true {addCommutative}
                  => a.p + ++(b.p) =? a.p + ++(c.p) = true {addCommutative}
                  return p
                  };
           norm lem1;
           lem2: a.p + b.p =? a.p + c.p = true :=
           prove {
                  => b.p + a.p =? a.p + c.p = true {addCommutative}
                  => b.p + a.p =? c.p + a.p = true {addCommutative}
                  return lem1;
                  };
           return sumCancel(a.p,b.p,c.p, lem2)
           }}}
 }

eqCorrect :: (a,b: Natp, p: a =? b = true) -> a = b
#norm(p)
{
 fork a
 {
  1  fork b {1, ++ return p},
  ++ fork b {1 return p, ++ rewrite  eqCorrect(a.p, b.p, p)}
  }
 }

addIsDifferent :: (a,b: Natp) -> a+b =? a = false
{fork a {1, ++ return addIsDifferent(a.p, b)}}

addIsDifferent :: (a,b: Natp) -> a =? a+b = false
{fork a {1, ++ return addIsDifferent(a.p,b)}}

eqReflexive :: (a: Natp) -> a =? a = true
{fork a
 {1,
  ++ return eqReflexive(a.p)}}

addPreservesLt :: (a,b,c: Natp, p: a < b) -> c+a < c+b
#hint
{ fork c
  { 1,
    ++ unfold; unfold; => c.p + a < c.p + b; use addPreservesLt}}

;; TODO: implement three-way disjunction so I don't have to bind these names
TotalOrder :: union (^a,^b: Natp)
{ eq(p: a = b),
  lt(p: a < b),
  gt(p: b < a),}

totalOrder :: (a,b: Natp) -> TotalOrder(a,b)
{fork a
 {1 fork b {1  return eq(_),
            ++ use lt {p unfold; unfold}},
  ++ fork b
  {1 use gt {p unfold; unfold;},
   ++
   ind := totalOrder(a.p, b.p);
   fork ind {eq return eq(prove{rewrite ind.p}),
             gt return gt(prove{norm; return ind.p}),
             lt return lt(prove{norm; return ind.p})}}}}

differentFromPlus :: (a: Natp, b: Natp, p: a = a+b) -> False
#norm(p)
{fork a
 {1  return p,
  ++ return differentFromPlus(a.p, b, p)}}

mulDistributive :: (a,b,c: Natp) -> c*(a+b) = c*a+c*b
#hint #tag(Natp, left)
{
 => (a+b)*c = c*a+c*b
 => (a+b)*c = a*c+c*b
 => (a+b)*c = a*c+b*c
 }

;; todo: rename to "=?"
== :: fn(a,b: Natp) -> Bool
{fork a
 {1  fork b {1  return true,
             ++ return false}
  ,
  ++ fork b {1  return false,
             ++ return a.p == b.p}}}

le1 :: ($a: Natp, p: a <= 1) -> a=1
{fork a {1, ++ norm p;}}

leLemma :: (a,b: Natp, p: a <= b) -> a=b \/ a < b
#hint
{ fork a
  { 1 fork b {1 use left, ++ use right}
    ,
    ++ fork b
    { 1 norm p,
      ++
      norm p;
      recurse := use leLemma {a=a.p, b=b.p, p=p};
      norm recurse;}}}

ltLemma :: (a,b: Natp, p: a < ++(b)) -> a=b \/ a < b
{ fork a
  { 1 fork b {1 use left, ++ use right}
    ,
    ++ fork b
    { 1 norm p,
      ++
      norm p;
      recurse := use ltLemma {a=a.p, b=b.p, p=p};
      norm recurse;}}}

leChain :: (a,b,c: Natp, p: a <= b, q: b <= c) -> a <= c
{ fork c
  { 1 pose le1(q); rewrite b=1 in p,
    ++ fork b
    { 1  pose le1(p); rewrite a=1, 
      ++ fork a
      { 1  ,
        ++
        unfold p; unfold p; prove a.p <= b.p {return p}
        unfold q; unfold q; prove b.p <= c.p {return q}
        unfold; unfold; => a.p <= c.p;
        use leChain {b=b.p}}}}}

ltAntiSymmetric :: (a,b: Natp, p: a < b, q: b < a) -> False
{ prove a < a {use ltChain {b=b}};
  use ltAntiReflexive {a=a}}

leAntiSymmetric :: (a,b: Natp, p: a <= b, q: b <= a) -> a=b
{ fork a
  { 1  prove b=1 {use le1}; rewrite b=1,
    ++ fork b {1, ++ unfold p; unfold q; use leAntiSymmetric}}}

leSuccessor :: (a: Natp) -> a <= ++(a)
{ fork a {1 unfold, ++ unfold; => a.p <= ++(a.p); use leSuccessor}}

ltLe :: (a,b: Natp, p: a < b) -> a <= b
#hint
{ unfold p; fork b {1 unfold p, ++ use leChain {b=b.p, q=prove{use leSuccessor};}}}

mulPreservesLt :: (a,b,q: Natp, p: a < b) -> q*a < q*b
#hint
{ fork q
  { 1,
    ++
    prove q.p * a < q.p * b {use mulPreservesLt}
    prove a + q.p * a < a + q.p * b {use addPreservesLt}
    prove a + q.p * b < b + q.p * b { => q.p * b + a < b + q.p * b;
                                      => q.p * b + a < q.p * b + b;
                                      use addPreservesLt}
    use ltChain {b = a + q.p * b}}}

mulCancel1 :: (a,b: Natp, p: b=a*b) -> a=1
#hint
{ fork a
  { 1,
    ++ norm p; prove b < b + a.p*b {}
    prove b < b {=> b < b + a.p * b}
    use ltAntiReflexive {a=b}}}

mulCancelRight :: (a,b,c: Natp, P: a*c=b*c) -> a=b
{ fork a
  { 1  norm P; prove b=1 {use mulCancel1 {b=c}}; subst b;,
    ++ norm P;
    fork b
    { 1  norm P; prove c < c {=> c < c + a.p*c}; use ltAntiReflexive{a=c},
      ++ norm P; prove a.p * c = b.p * c {use sumCancel {a=c}}; use mulCancelRight {c=c}}}}

mulCancelLeft :: (a,b,c: Natp, P: c*a=c*b) -> a=b
{ prove { => a*c = b*c;
          => c*a = b*c;
          => c*a = c*b;}
  use mulCancelRight{c=c}}

leMul :: (a,b: Natp) -> a <= b*a
#hint
{ fork b { 1, ++ }}

ltLeChain :: (a,b,c: Natp, P: a<b, Q: b<=c) -> a < c
{ P1 := use leLemma{a=b, b=c};
  fork P1
  { auto => a < b,
    auto use ltChain {b=b}}}

leLtChain :: (a,b,c: Natp, P: a<=b, Q: b<c) -> a < c
{ P1 := use leLemma{a=a, b=b};
  fork P1
  { auto => b < c,
    auto use ltChain {b=b}}}

algebra_declare Natp;
