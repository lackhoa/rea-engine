void eatToken(Tokenizer * tk);
Token nextToken(Tokenizer * tk);
Token peekToken(Tokenizer * tk);
Term * getType(Term * in0);
void dump(Trinary trinary);
void unwindScope(Typer * env);
void unwindBindingsAndScope(Typer * env);
void dump(Term * in0);
void dump(Ast * in0);
void DEBUG_INDENT();
void DEBUG_DEDENT();
void print(Arena * buffer, Ast * in0, PrintOptions opt);
void print(Arena * buffer, Ast * in0);
void print(Arena * buffer, Term * in0, PrintOptions opt);
void print(Arena * buffer, Term * in0);
b32 equal(Term * lhs, Term * rhs);
Record * castRecord(Term * record0);
Term * apply(Term * op, i32 arg_count, Term ** args, String name_to_unfold);
Trinary equalTrinary(Term * lhs0, Term * rhs0);
Term * solveGoal(Solver * solver, Term * goal);
BuildTerm buildTerm(Typer * typer, Ast * in0, Term * goal);
Term * buildFork(Typer * typer, ForkAst * in, Term * goal);
Term * newRewrite(Arena * arena, Term * eq_proof, Term * body, TreePath * path, b32 right_to_left);
Ast * parseFork();
Term * buildUnion(Typer * typer, UnionAst * in, Token * global_name);
Ast * parseExpression();
b32 interpretFile(EngineState * state, FilePath input_path, b32 is_root_file);
