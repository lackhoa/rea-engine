Token * eatToken();
Token nextToken();
Token peekToken();
Ast * parseUse();
Ast * parseExpression();
Ast * parseFork();
void dump(Trinary trinary);
void unwindScope(Typer * env);
void unwindBindingsAndScope(Typer * env);
void dump(Term * in0);
void dump(Ast * in0);
void DEBUG_INDENT();
void DEBUG_DEDENT();
void print(Arena * buffer, Ast * in0, PrintOptions opt);
void print(Arena * buffer, Ast * in0);
void print(Arena * buffer, Term * in0, PrintOptions opt);
void print(Arena * buffer, Term * in0);
b32 equal(Term * lhs, Term * rhs);
Trinary equalTrinary(Term * lhs0, Term * rhs0);
b32 equalNorm(Term * l, Term * r);
void checkRecursiveCall(Term * op0, i32 arg_count, Term ** args, Term * reduce_proof);
Record * castRecord(Term * record0);
Term * apply(Term * op, i32 arg_count, Term ** args, String unfold_name);
Term * solveGoal(Solver * solver, Term * goal);
BuildTerm buildTerm(Typer * typer, Ast * in0, Term * goal0);
Term * buildFork(Typer * typer, ForkAst * in, Term * goal);
Term * buildUnion(Typer * typer, UnionAst * in, Token * global_name);
b32 interpretFile(EngineState * state, FilePath input_path, b32 is_root_file);
